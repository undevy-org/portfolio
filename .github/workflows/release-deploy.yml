# Production Release Deployment Pipeline
# Location: .github/workflows/release-deploy.yml
# Purpose: Deploy to production when a version tag is pushed (v*.*.*)
# This is the PRIMARY workflow for releases - handles everything end-to-end

name: Deploy Production Release

on:
  push:
    tags:
      - 'v*.*.*'

# Prevent concurrent runs for the same tag -> avoid races
concurrency:
  group: release-${{ github.ref_name }}
  cancel-in-progress: false

# Need write permissions to upload release assets and create releases
permissions:
  contents: write

jobs:
  build-and-deploy-production:
    name: Build and Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup release info
        run: |
          echo "üè∑Ô∏è Production Release Deployment"
          echo "Tag: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Target: ${{ secrets.PRODUCTION_DOMAIN_1 }} / ${{ secrets.PRODUCTION_DOMAIN_2 }}"
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies for production build..."
          npm ci --prefer-offline --no-audit --no-fund
      
      - name: Build production release
        env:
          NODE_ENV: production
          PORTFOLIO_TITLE: ${{ secrets.PORTFOLIO_TITLE }}
          NEXT_PUBLIC_WEB3_SHARED_ACCESS_CODE: ${{ secrets.NEXT_PUBLIC_WEB3_SHARED_ACCESS_CODE }}
          NEXT_PUBLIC_REOWN_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_REOWN_PROJECT_ID }}
          MASTER_CODE: ${{ secrets.MASTER_CODE }}
        run: |
          echo "üèó Building production release ${{ github.ref_name }}..."
          
          # Clean build for production
          rm -rf .next
          npm run build
          
          # Verify build succeeded
          if [ ! -d ".next" ]; then
            echo "‚ùå Build failed - .next directory not found"
            exit 1
          fi
          
          echo "‚úÖ Production build complete"
          echo "üìä Build stats:"
          echo "  Total size: $(du -sh .next | cut -f1)"
          echo "  Static assets: $(du -sh .next/static | cut -f1)"
          echo "  Server bundles: $(du -sh .next/server | cut -f1)"
      
      - name: Prepare production release package
        run: |
          echo "üì¶ Creating production release package..."
          
          mkdir -p release-package
          
          # Copy production files only
          echo "üìÅ Copying production files..."
          cp -r .next release-package/
          cp -r public release-package/ 2>/dev/null || echo "‚ÑπÔ∏è No public directory"
          cp package.json release-package/
          cp package-lock.json release-package/
          cp next.config.mjs release-package/
          
          # Add version file for tracking
          echo "${{ github.ref_name }}" > release-package/VERSION
          echo "${{ github.sha }}" >> release-package/VERSION
          echo "$(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> release-package/VERSION
          
          # Remove all development artifacts
          echo "üßπ Cleaning development artifacts..."
          rm -rf release-package/.next/cache
          find release-package -name "*.map" -type f -delete 2>/dev/null || true
          
          # Create deployment archive
          echo "üì¶ Creating deployment archive..."
          cd release-package
          tar -czf ../portfolio-release-${{ github.ref_name }}.tar.gz .
          cd ..
          
          echo "‚úÖ Release package created"
          echo "üìä Package size: $(du -h portfolio-release-${{ github.ref_name }}.tar.gz | cut -f1)"
      
      - name: Create GitHub Release with artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ github.ref_name }}"
          REPO="${{ github.repository }}"
          ARTIFACT="portfolio-release-${TAG}.tar.gz"
          
          echo "üìù Creating GitHub Release for ${TAG}..."
          
          # Check if release already exists (shouldn't happen with our concurrency control)
            if gh release view "${TAG}" --repo "${REPO}" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Release ${TAG} already exists. Deleting it to recreate..."
            gh release delete "${TAG}" --repo "${REPO}" --yes || true
            sleep 2
          fi
          
          # Extract changelog for this version if CHANGELOG.md exists
          RELEASE_NOTES=""
          if [ -f "CHANGELOG.md" ]; then
            echo "üìñ Extracting changelog for ${TAG}..."
            # Try to extract the section for this version from CHANGELOG.md
            # This is a simple extraction - adjust based on your CHANGELOG format
            RELEASE_NOTES=$(awk "/## \[?${TAG#v}/,/## \[?[0-9]/" CHANGELOG.md | head -n -2) || true
          fi
          
          # Create release notes file
          NOTES_FILE="/tmp/release_notes_${TAG}.md"
          cat > "${NOTES_FILE}" << EOF
          ## üöÄ Release ${TAG}
          
          This release has been automatically built and deployed to production.
          
          ### Deployment Info
          - **Version:** ${TAG}
          - **Commit:** ${{ github.sha }}
          - **Deployed at:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ### Sites
          - üåê [${{ secrets.PRODUCTION_DOMAIN_1 }}](https://${{ secrets.PRODUCTION_DOMAIN_1 }})
          - üåê [${{ secrets.PRODUCTION_DOMAIN_2 }}](https://${{ secrets.PRODUCTION_DOMAIN_2 }})
          
          ${RELEASE_NOTES}
          
          ### Release Artifact
          The production build artifact is attached below.
          EOF
          
          # Create the release as DRAFT first
          echo "üìù Creating draft release..."
          gh release create "${TAG}" \
            --repo "${REPO}" \
            --title "Release ${TAG}" \
            --notes-file "${NOTES_FILE}" \
            --draft
          
          # Upload the artifact
          echo "üì§ Uploading release artifact..."
          gh release upload "${TAG}" \
            "${ARTIFACT}" \
            --repo "${REPO}" \
            --clobber
          
          echo "‚úÖ Release created with artifact"
      
      - name: Transfer release to server
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          echo "üîê Setting up SSH key..."
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add host to known hosts
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts 2>/dev/null
          
          echo "üì§ Transferring release to server..."
          scp -i ~/.ssh/deploy_key portfolio-release-${{ github.ref_name }}.tar.gz $SSH_USER@$SSH_HOST:/tmp/
          
          echo "‚úÖ Release transferred successfully"
      
      - name: Deploy production with blue-green strategy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            
            echo "üîß Setting up Node environment..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            # Configuration
            RELEASE_TAG="${{ github.ref_name }}"
            RELEASE_DIR="/home/undevy/releases/portfolio/$RELEASE_TAG"
            CURRENT_LINK="/home/undevy/undevy.com"
            SHARED_DIR="${{ secrets.SHARED_ENV_PATH_PORTFOLIO }}"
            PM2_APP="${{ secrets.PM2_APP_NAME_PORTFOLIO }}"
            
            echo "üöÄ Starting blue-green deployment for $RELEASE_TAG"
            
            # Create release directory
            echo "üìÅ Creating release directory..."
            mkdir -p "$RELEASE_DIR"
            
            # Extract release files
            echo "üì¶ Extracting release files..."
            tar -xzf /tmp/portfolio-release-$RELEASE_TAG.tar.gz -C "$RELEASE_DIR"

            # Ensure no duplicate image directories
            echo "üßπ Ensuring clean static assets setup..."
            rm -rf "$RELEASE_DIR/public/images" || true
            echo "‚úÖ Static assets will be served directly by Nginx"
            
            # Copy shared files (env, uploads)
            echo "üíæ Applying production configuration..."
            if [ -f "$SHARED_DIR/.env" ]; then
              cp "$SHARED_DIR/.env" "$RELEASE_DIR/.env"
            else
              echo "‚ùå ERROR: Production .env file not found!"
              exit 1
            fi
            
            # Preserve user uploads if they exist
            if [ -L "$CURRENT_LINK" ] && [ -d "$(readlink -f $CURRENT_LINK)/public/images/projects" ]; then
              echo "üì∏ Preserving user-uploaded images..."
              mkdir -p "$RELEASE_DIR/public/images"
              cp -r "$(readlink -f $CURRENT_LINK)/public/images/projects" "$RELEASE_DIR/public/images/" || true
            fi
            
            # Install production dependencies
            cd "$RELEASE_DIR"
            echo "üì¶ Installing production dependencies..."
            npm ci --omit=dev || npm install --production
            
            # Get current version for rollback info
            PREVIOUS_VERSION=""
            if [ -L "$CURRENT_LINK" ]; then
              PREVIOUS_VERSION=$(basename $(readlink -f $CURRENT_LINK))
              echo "üìå Current version: $PREVIOUS_VERSION"
            fi
            
            # Update symbolic link (atomic operation)
            echo "üîÑ Switching to new version..."
            ln -sfn "$RELEASE_DIR" "$CURRENT_LINK"
            
            # Restart application
            echo "üîÑ Restarting production application..."
            if pm2 describe "$PM2_APP" >/dev/null 2>&1; then
              pm2 stop "$PM2_APP" || true
              pm2 delete "$PM2_APP" || true
              cd "$CURRENT_LINK"
              pm2 start npm --name "$PM2_APP" \
                --max-memory-restart="400M" \
                -- start
              echo "‚úÖ Application restarted: $PM2_APP"
            else
              # First time setup
              cd "$CURRENT_LINK"
              pm2 start npm --name "$PM2_APP" \
                --max-memory-restart="400M" \
                -- start
              echo "‚úÖ Application started: $PM2_APP"
            fi
            
            pm2 save || true
            
            # Health check
            echo "üè• Performing health check..."
            sleep 5
            if pm2 describe "$PM2_APP" | grep -q "online"; then
              echo "‚úÖ Application is healthy and running"
            else
              echo "‚ùå Application health check failed!"
              echo "üîÑ Rolling back to previous version..."
              if [ -n "$PREVIOUS_VERSION" ] && [ -d "/home/undevy/releases/portfolio/$PREVIOUS_VERSION" ]; then
                ln -sfn "/home/undevy/releases/portfolio/$PREVIOUS_VERSION" "$CURRENT_LINK"
                pm2 restart "$PM2_APP" --update-env
                echo "‚úÖ Rolled back to $PREVIOUS_VERSION"
              fi
              exit 1
            fi
            
            # Show application status
            echo "üìä Application status:"
            pm2 list | grep "$PM2_APP" || true
            
            # Cleanup old releases (keep last 3)
            echo "üßπ Cleaning up old releases..."
            cd /home/undevy/releases/portfolio
            ls -t | grep -v "$RELEASE_TAG" | tail -n +4 | xargs rm -rf || true
            rm -f /tmp/portfolio-release-*.tar.gz
            
            # Log deployment
            echo "üìù Logging deployment..."
            echo "[$RELEASE_TAG] Deployed at $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> /home/undevy/deployments.log
            
            echo "‚úÖ Production deployment completed successfully!"
            echo ""
            echo "üéâ Release $RELEASE_TAG is now live!"
            echo "üåê Sites:"
            echo "  - https://${{ secrets.PRODUCTION_DOMAIN_1 }}"
            echo "  - https://${{ secrets.PRODUCTION_DOMAIN_2 }}"
            if [ -n "$PREVIOUS_VERSION" ]; then
              echo ""
              echo "üîÑ Rollback command (if needed):"
              echo "  ln -sfn /home/undevy/releases/portfolio/$PREVIOUS_VERSION /home/undevy/undevy.com"
              echo "  pm2 restart $PM2_APP"
            fi
      
      - name: Publish GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ github.ref_name }}"
          REPO="${{ github.repository }}"
          
          echo "üì¢ Publishing release ${TAG}..."
          
          # Publish the release (make it visible to everyone)
          gh release edit "${TAG}" \
            --repo "${REPO}" \
            --draft=false
          
          echo "‚úÖ Release ${TAG} published successfully!"
      
      - name: Production deployment summary
        run: |
          echo "üéâ PRODUCTION RELEASE DEPLOYED!"
          echo "=================================="
          echo "Version: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo ""
          echo "Production sites updated:"
          echo "  üåê https://${{ secrets.PRODUCTION_DOMAIN_1 }}"
          echo "  üåê https://${{ secrets.PRODUCTION_DOMAIN_2 }}"
          echo ""
          echo "GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
          echo "Release artifact permanently stored in GitHub Releases"
          echo "Blue-green deployment completed with rollback capability"