# Deploy Pipeline - Downloads artifacts and deploys to production
# Location: .github/workflows/deploy.yml

name: Deploy to DigitalOcean

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
    branches: [main]

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Setup deployment info
        run: |
          echo "üöÄ Starting deployment for commit: ${{ github.event.workflow_run.head_sha }}"
          echo "Triggered by: ${{ github.event.workflow_run.name }}"
          echo "Run ID: ${{ github.event.workflow_run.id }}"
      
      - name: Download deployment artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          run_id: ${{ github.event.workflow_run.id }}
          name: deployment-package-${{ github.event.workflow_run.head_sha }}
          path: deployment-files
      
      - name: Verify and restore .next directory
        run: |
          echo "üì¶ Verifying downloaded artifact structure..."
          
          echo "üìÅ Downloaded contents:"
          ls -la deployment-files/
          
          # Check if .next was renamed
          if [ -f "deployment-files/NEXT_WAS_RENAMED" ]; then
            echo "üîÑ Detected renamed next-build, restoring to .next..."
            if [ -d "deployment-files/next-build" ]; then
              mv deployment-files/next-build deployment-files/.next
              rm deployment-files/NEXT_WAS_RENAMED
              echo "‚úÖ Restored .next directory"
            else
              echo "‚ùå next-build directory not found!"
              exit 1
            fi
          fi
          
          # Final verification
          if [ ! -d "deployment-files/.next" ]; then
            echo "‚ùå ERROR: .next directory not found after restoration!"
            echo "Current structure:"
            find deployment-files -type d -maxdepth 2
            exit 1
          fi
          
          echo "‚úÖ Found .next directory"
          echo "üìä .next size: $(du -sh deployment-files/.next | cut -f1)"
          
          if [ ! -f "deployment-files/package.json" ]; then
            echo "‚ùå ERROR: package.json not found!"
            exit 1
          fi
          
          echo "‚úÖ All required files present"
          echo "üìä Total deployment size: $(du -sh deployment-files | cut -f1)"
      
      - name: Deploy portfolio files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "deployment-files/*"
          target: ${{ secrets.DEPLOY_PATH_PORTFOLIO }}
          strip_components: 1
          rm: true  # Remove old files before copying
      
      - name: Install dependencies and restart portfolio
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            
            echo "üîß Setting up Node environment..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            cd ${{ secrets.DEPLOY_PATH_PORTFOLIO }}
            
            echo "‚úÖ Verifying deployment files..."
            if [ ! -d ".next" ]; then
              echo "‚ùå ERROR: .next directory missing on server!"
              ls -la
              exit 1
            fi
            
            echo "üì¶ Installing production dependencies..."
            npm install --production
            
            echo "üîÑ Restarting application..."
            pm2 restart ${{ secrets.PM2_APP_NAME_PORTFOLIO }}
            
            echo "‚úÖ Deployment complete!"
      
      # Deploy bot (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
      - name: Checkout code for bot deployment
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          sparse-checkout: |
            telegram-bot
      
      - name: Deploy bot files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "telegram-bot/*"
          target: ${{ secrets.DEPLOY_PATH_BOT_PARENT }}
      
      - name: Install dependencies and restart bot
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            cd ${{ secrets.DEPLOY_PATH_BOT }}
            npm install --production
            pm2 restart ${{ secrets.PM2_APP_NAME_BOT }}
            
            echo "‚úÖ Bot deployment complete!"
  
  failure-notification:
    name: Handle CI Failure
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    
    steps:
      - name: Report CI failure
        run: |
          echo "‚ùå CI Pipeline failed!"
          echo "Deployment cancelled."
          exit 1