# Deploy Pipeline for Portfolio - UPDATED (Bot removed)
# Location: .github/workflows/deploy.yml
# Version: Post-monorepo split

name: Deploy to DigitalOcean

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
    branches: [main]

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Setup deployment info
        run: |
          echo "üöÄ Starting portfolio deployment"
          echo "Commit: ${{ github.event.workflow_run.head_sha }}"
          echo "Triggered by: ${{ github.event.workflow_run.name }}"
          echo "Run ID: ${{ github.event.workflow_run.id }}"
      
      - name: Download deployment artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          run_id: ${{ github.event.workflow_run.id }}
          name: deployment-package-${{ github.event.workflow_run.head_sha }}
          path: deployment-files
      
      # Verify downloaded artifact
      - name: Verify downloaded artifact
        run: |
          echo "üì¶ Verifying downloaded artifact..."
          
          echo "üìÅ Downloaded contents:"
          ls -la deployment-files/
          
          # Check for .next directory
          if [ ! -d "deployment-files/.next" ]; then
            echo "‚ùå ERROR: .next directory not found in artifact!"
            echo "Current structure:"
            find deployment-files -type d -maxdepth 2
            exit 1
          fi
          
          echo "‚úÖ Found .next directory"
          echo "üìä .next size: $(du -sh deployment-files/.next | cut -f1)"
          
          if [ ! -f "deployment-files/package.json" ]; then
            echo "‚ùå ERROR: package.json not found!"
            exit 1
          fi
          
          echo "‚úÖ All required files present"
      
      # Deploy portfolio files to server
      - name: Deploy portfolio to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            
            echo "üîß Setting up Node environment..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            DEPLOY_PATH="${{ secrets.DEPLOY_PATH_PORTFOLIO }}"
            TEMP_DIR="$DEPLOY_PATH-temp-$(date +%s)"
            
            echo "üìÅ Creating temporary deployment directory..."
            mkdir -p "$TEMP_DIR"
      
      # Transfer files to server
      - name: Transfer files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "deployment-files/*"
          target: "${{ secrets.DEPLOY_PATH_PORTFOLIO }}-temp-deploy"
          strip_components: 1
          rm: true
      
      # Complete deployment and restart
      - name: Complete deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            
            echo "üîß Setting up Node environment..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            DEPLOY_PATH="${{ secrets.DEPLOY_PATH_PORTFOLIO }}"
            TEMP_PATH="$DEPLOY_PATH-temp-deploy/deployment-files"
            
            # Backup important files
            echo "üíæ Backing up environment and user files..."
            if [ -f "$DEPLOY_PATH/.env" ]; then
              cp "$DEPLOY_PATH/.env" "$TEMP_PATH/.env"
            fi
            
            if [ -d "$DEPLOY_PATH/public/images/projects" ]; then
              echo "üì∏ Backing up user-uploaded images..."
              cp -r "$DEPLOY_PATH/public/images/projects" "$TEMP_PATH/public/images/" || true
            fi
            
            # Swap directories
            echo "üîÑ Swapping deployment directories..."
            if [ -d "$DEPLOY_PATH" ]; then
              mv "$DEPLOY_PATH" "$DEPLOY_PATH-old-$(date +%s)"
            fi
            mv "$TEMP_PATH" "$DEPLOY_PATH"
            
            # Install production dependencies
            cd "$DEPLOY_PATH"
            echo "üì¶ Installing production dependencies..."
            npm ci --omit=dev || npm install --production
            
            # Restart portfolio application
            echo "üîÑ Restarting portfolio application..."
            APP="${{ secrets.PM2_APP_NAME_PORTFOLIO }}"
            
            if pm2 describe "$APP" >/dev/null 2>&1; then
              pm2 restart "$APP" --update-env
              echo "‚úÖ Portfolio restarted: $APP"
            else
              pm2 start npm --name "$APP" -- start
              echo "‚úÖ Portfolio started: $APP"
            fi
            
            pm2 save || true
            
            # Show application status
            echo "üìä Application status:"
            pm2 show "$APP" || true
            
            # Cleanup old directories (keep last 2 for rollback)
            echo "üßπ Cleaning up old deployments..."
            ls -dt $DEPLOY_PATH-old-* 2>/dev/null | tail -n +3 | xargs rm -rf || true
            rm -rf $DEPLOY_PATH-temp-deploy || true
            
            echo "‚úÖ Portfolio deployment completed!"
      
      # Final success notification
      - name: Deployment summary
        run: |
          echo "üéâ PORTFOLIO DEPLOYMENT SUCCESSFUL!"
          echo "================================"
          echo "Commit: ${{ github.event.workflow_run.head_sha }}"
          echo "Portfolio has been deployed to production."
          echo ""
          echo "Note: Telegram bot is now deployed separately from:"
          echo "https://github.com/undevy-org/telegram-bot"
  
  # Handle failed CI
  failure-notification:
    name: Handle CI Failure
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    
    steps:
      - name: Report CI failure
        run: |
          echo "‚ùå CI Pipeline failed!"
          echo "Commit: ${{ github.event.workflow_run.head_sha }}"
          echo "Deployment cancelled due to failed tests or build."
          echo "Check the failed run: ${{ github.event.workflow_run.html_url }}"
          exit 1