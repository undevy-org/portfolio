# Deploy Pipeline - Downloads artifacts and deploys to production
# Location: .github/workflows/deploy.yml

name: Deploy to DigitalOcean

on:
  # Triggered when CI Pipeline completes on main branch
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
    branches: [main]

jobs:
  # Main deployment job
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    # Only run if CI was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      # Step 1: Setup deployment environment
      - name: Setup deployment info
        run: |
          echo "üöÄ Starting deployment for commit: ${{ github.event.workflow_run.head_sha }}"
          echo "Triggered by: ${{ github.event.workflow_run.name }}"
          echo "Run ID: ${{ github.event.workflow_run.id }}"
      
      # Step 2: Download artifact using the official action
      # This is simpler and more reliable than using github-script
      - name: Download deployment artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          # Download from the CI workflow run that triggered this deployment
          run_id: ${{ github.event.workflow_run.id }}
          name: deployment-package-${{ github.event.workflow_run.head_sha }}
          path: deployment-files
      
      # Step 3: Verify downloaded artifact structure
      - name: Verify artifact contents
        run: |
          echo "üì¶ Verifying downloaded artifact structure..."
          
          echo "üìÅ Root level contents:"
          ls -la deployment-files/
          
          if [ ! -d "deployment-files/.next" ]; then
            echo "‚ùå ERROR: .next directory not found in artifact!"
            echo "Artifact structure:"
            find deployment-files -type d -maxdepth 3
            exit 1
          fi
          
          echo "‚úÖ Found .next directory"
          echo "üìä .next size: $(du -sh deployment-files/.next | cut -f1)"
          
          if [ ! -f "deployment-files/package.json" ]; then
            echo "‚ùå ERROR: package.json not found in artifact!"
            exit 1
          fi
          
          echo "‚úÖ Found package.json"
          
          if [ ! -d "deployment-files/src" ]; then
            echo "‚ùå ERROR: src directory not found in artifact!"
            exit 1
          fi
          
          echo "‚úÖ Found src directory"
          
          echo "üìä Total deployment size: $(du -sh deployment-files | cut -f1)"
          echo "‚úÖ All required files present"
      
      # Step 4: Deploy portfolio application
      - name: Deploy portfolio files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Copy all contents from deployment-files
          source: "deployment-files/*"
          target: ${{ secrets.DEPLOY_PATH_PORTFOLIO }}
          # Remove the wrapper directory when copying
          strip_components: 1
      
      # Step 5: Finalize portfolio deployment
      - name: Install dependencies and restart portfolio
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on any error
            
            echo "üîß Setting up Node environment..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            echo "üìÅ Navigating to portfolio directory..."
            cd ${{ secrets.DEPLOY_PATH_PORTFOLIO }}
            
            echo "üì¶ Installing production dependencies..."
            npm install --production
            
            echo "‚úÖ Verifying deployment structure..."
            if [ ! -d ".next" ]; then
              echo "‚ùå ERROR: .next directory missing after deployment!"
              ls -la
              exit 1
            fi
            
            if [ ! -d "src" ]; then
              echo "‚ùå ERROR: src directory missing after deployment!"
              ls -la
              exit 1
            fi
            
            echo "üîÑ Restarting portfolio application..."
            pm2 restart ${{ secrets.PM2_APP_NAME_PORTFOLIO }}
            
            echo "üìä Application status:"
            pm2 status ${{ secrets.PM2_APP_NAME_PORTFOLIO }}
            
            echo "‚úÖ Portfolio deployment completed successfully!"
      
      # Step 6: Deploy Telegram bot
      # We need to checkout the code for bot files since they're not in the artifact
      - name: Checkout code for bot deployment
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          sparse-checkout: |
            telegram-bot
      
      - name: Deploy bot files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "telegram-bot/*"
          target: ${{ secrets.DEPLOY_PATH_BOT_PARENT }}
      
      - name: Install dependencies and restart bot
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on any error
            
            echo "üîß Setting up Node environment..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            echo "üìÅ Navigating to bot directory..."
            cd ${{ secrets.DEPLOY_PATH_BOT }}
            
            echo "üì¶ Installing bot dependencies..."
            npm install --production
            
            echo "üîÑ Restarting bot..."
            pm2 restart ${{ secrets.PM2_APP_NAME_BOT }}
            
            echo "üìä Bot status:"
            pm2 status ${{ secrets.PM2_APP_NAME_BOT }}
            
            echo "‚úÖ Bot deployment completed successfully!"
      
      # Final success notification
      - name: Deployment summary
        run: |
          echo "üéâ DEPLOYMENT SUCCESSFUL!"
          echo "Commit: ${{ github.event.workflow_run.head_sha }}"
          echo "Portfolio and Bot have been deployed to production."
  
  # Handle failed CI
  failure-notification:
    name: Handle CI Failure
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    
    steps:
      - name: Report CI failure
        run: |
          echo "‚ùå CI Pipeline failed!"
          echo "Commit: ${{ github.event.workflow_run.head_sha }}"
          echo "Deployment cancelled due to failed tests or build."
          echo "Check the failed run: ${{ github.event.workflow_run.html_url }}"
          exit 1