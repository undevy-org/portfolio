# .github/workflows/deploy.yml
name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  deploy-portfolio:
    name: Deploy Portfolio App
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository code
      - name: Step 1 - Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup Node.js
      - name: Step 2 - Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Step 3: Install dependencies and build the project
      - name: Step 3 - Install dependencies and build
        run: |
          echo "üì¶ Verifying downloaded artifact structure..."
          
          echo "üìÅ Downloaded contents:"
          ls -la deployment-files/
          
          # Check if .next was renamed
          if [ -f "deployment-files/NEXT_WAS_RENAMED" ]; then
            echo "üîÑ Detected renamed next-build, restoring to .next..."
            if [ -d "deployment-files/next-build" ]; then
              mv deployment-files/next-build deployment-files/.next
              rm deployment-files/NEXT_WAS_RENAMED
              echo "‚úÖ Restored .next directory"
            else
              echo "‚ùå next-build directory not found!"
              exit 1
            fi
          fi
          
          # Final verification
          if [ ! -d "deployment-files/.next" ]; then
            echo "‚ùå ERROR: .next directory not found after restoration!"
            echo "Current structure:"
            find deployment-files -type d -maxdepth 2
            exit 1
          fi
          
          echo "‚úÖ Found .next directory"
          echo "üìä .next size: $(du -sh deployment-files/.next | cut -f1)"
          
          if [ ! -f "deployment-files/package.json" ]; then
            echo "‚ùå ERROR: package.json not found!"
            exit 1
          fi
          
          echo "‚úÖ All required files present"
          echo "üìä Total deployment size: $(du -sh deployment-files | cut -f1)"
      
      - name: Backup environment files and project images
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /tmp/deploy-backup
            echo "üì∏ Backing up project images..."
            
            # Backup images if directory exists
            if [ -d "${{ secrets.DEPLOY_PATH_PORTFOLIO }}/public/images/projects" ]; then
              echo "Found project images, creating backup..."
              rm -rf /tmp/deploy-backup/projects-images
              cp -r "${{ secrets.DEPLOY_PATH_PORTFOLIO }}/public/images/projects" /tmp/deploy-backup/projects-images
              echo "‚úÖ Images backed up: $(find /tmp/deploy-backup/projects-images -type f | wc -l) files"
            else
              echo "‚ö†Ô∏è No project images directory found, skipping backup"
            fi
            
            # Backup environment files
            echo "üîê Backing up environment files..."
            ls -la "${{ secrets.DEPLOY_PATH_PORTFOLIO }}" | grep .env || echo "No env files found"
            for f in .env .env.local .env.production; do
              if [ -f "${{ secrets.DEPLOY_PATH_PORTFOLIO }}/$f" ]; then
                cp "${{ secrets.DEPLOY_PATH_PORTFOLIO }}/$f" "/tmp/deploy-backup/$f"
              fi
            done

      # Step 4: Copy build files to the server
      - name: Step 4 - Deploy build files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ".next, package.json, package-lock.json, public, next.config.mjs, src"
          # CHANGED: Use GitHub secret for deployment path instead of hardcoded path
          target: ${{ secrets.DEPLOY_PATH_PORTFOLIO }}

      - name: Restore environment files and project images
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Restore environment files
            echo "üîê Restoring environment files..."
            for f in .env .env.local .env.production; do
              if [ -f "/tmp/deploy-backup/$f" ]; then
                cp "/tmp/deploy-backup/$f" "${{ secrets.DEPLOY_PATH_PORTFOLIO }}/$f"
              fi
            done

            # Restore project images
            echo "üì∏ Restoring project images..."
            if [ -d "/tmp/deploy-backup/projects-images" ]; then
              mkdir -p "${{ secrets.DEPLOY_PATH_PORTFOLIO }}/public/images"
              rm -rf "${{ secrets.DEPLOY_PATH_PORTFOLIO }}/public/images/projects"
              cp -r "/tmp/deploy-backup/projects-images" "${{ secrets.DEPLOY_PATH_PORTFOLIO }}/public/images/projects"
              echo "‚úÖ Images restored: $(find ${{ secrets.DEPLOY_PATH_PORTFOLIO }}/public/images/projects -type f | wc -l) files"
            else
              echo "‚ö†Ô∏è No images backup found, creating empty directory"
              mkdir -p "${{ secrets.DEPLOY_PATH_PORTFOLIO }}/public/images/projects"
            fi
            
            # Clean up backup
            rm -rf /tmp/deploy-backup

      - name: Install dependencies and restart portfolio
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            
            echo "üîß Setting up Node environment..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            # CHANGED: Use GitHub secret for deployment path
            cd ${{ secrets.DEPLOY_PATH_PORTFOLIO }}
            npm install --production
            # CHANGED: Use GitHub secret for PM2 process name
            pm2 restart ${{ secrets.PM2_APP_NAME_PORTFOLIO }}

  deploy-bot:
    name: Deploy Telegram Bot
    runs-on: ubuntu-latest
    needs: deploy-portfolio
    steps:
      # Step 1: Checkout repository code
      - name: Step 1 - Checkout code
        uses: actions/checkout@v4

      # Step 2: Copy bot files to the server
      - name: Step 2 - Deploy bot files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "telegram-bot/*"
          # CHANGED: Use GitHub secret for deployment path instead of hardcoded path
          target: ${{ secrets.DEPLOY_PATH_BOT_PARENT }}

      # Step 3: Install production dependencies and restart the bot process
      - name: Step 3 - Finalize bot deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            # CHANGED: Use GitHub secret for deployment path
            cd ${{ secrets.DEPLOY_PATH_BOT }}
            npm install --production
            # CHANGED: Use GitHub secret for PM2 process name
            pm2 restart ${{ secrets.PM2_APP_NAME_BOT }}