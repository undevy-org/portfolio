# CI Pipeline - Validates code quality before merge
# Location: .github/workflows/ci.yml

name: CI Pipeline

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

jobs:
  validate-code:
    name: Validate Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
      
      - name: Run tests
        run: npm test
      
      - name: Build project
        run: npm run build
      
      - name: Check build output
        run: |
          echo "Build completed successfully"
          echo "Build size information:"
          du -sh .next/
          du -sh .next/static/
          du -sh .next/server/
  
  create-artifact:
    name: Create Build Artifact
    runs-on: ubuntu-latest
    needs: validate-code
    # Only create artifacts for main branch (after merge)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Prepare production artifact
        run: |
          echo "üì¶ Preparing production artifact..."
          
          # CRITICAL: Remove webpack cache - it's not needed for production!
          echo "üóëÔ∏è Removing webpack cache (not needed for production)..."
          rm -rf .next/cache
          
          # Remove source maps to reduce size further
          echo "üóëÔ∏è Removing source maps..."
          find .next -name "*.map" -type f -delete
          
          # Show what we're including
          echo ""
          echo "üìã Production artifact will include:"
          echo "  ‚úÖ .next/static/ - Client-side assets"
          echo "  ‚úÖ .next/server/ - Server-side bundles"  
          echo "  ‚úÖ .next/BUILD_ID - Build identifier"
          echo "  ‚úÖ .next/build-manifest.json - Build metadata"
          echo "  ‚úÖ public/ - Static files"
          echo "  ‚úÖ package.json & package-lock.json"
          echo ""
          echo "  ‚ùå .next/cache/ - EXCLUDED (build cache, not needed)"
          echo "  ‚ùå *.map files - EXCLUDED (source maps, not needed)"
          
          # Check sizes after cleanup
          echo ""
          echo "üìä Final production sizes:"
          echo "  .next directory: $(du -sh .next | cut -f1)"
          echo "  .next/static: $(du -sh .next/static | cut -f1)"
          echo "  .next/server: $(du -sh .next/server | cut -f1)"
          echo "  public: $(du -sh public | cut -f1)"
          
          echo ""
          echo "üìä Total size for deployment:"
          du -sh -c .next public package.json package-lock.json | grep total
          
          # Verify critical files exist
          echo ""
          echo "‚úÖ Verifying critical files..."
          if [ ! -d ".next/static" ]; then
            echo "‚ùå ERROR: .next/static not found!"
            exit 1
          fi
          if [ ! -d ".next/server" ]; then
            echo "‚ùå ERROR: .next/server not found!"
            exit 1
          fi
          echo "‚úÖ All critical directories present"
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: portfolio-build-${{ github.sha }}
          path: |
            .next
            public
            package.json
            package-lock.json
          retention-days: 7
          compression-level: 9
      
      - name: Output artifact info
        run: |
          echo "‚úÖ Artifact created successfully"
          echo "Artifact name: portfolio-build-${{ github.sha }}"
          echo "This artifact will be used for deployment"