# Location: .github/workflows/ci.yml
# STAGE 1 OPTIMIZATION: Combined validate and build-artifact jobs to eliminate duplicate builds

name: CI Pipeline

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

jobs:
  # OPTIMIZED: Single job that validates AND creates artifacts
  # This eliminates the duplicate npm run build that was happening before
  validate-and-build:
    name: Validate and Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
      
      - name: Run tests
        run: npm test
      
      # BUILD HAPPENS ONLY ONCE NOW
      - name: Build project
        run: |
          echo "🏗️ Building project..."
          npm run build
          
          # Verify .next exists after build
          if [ ! -d ".next" ]; then
            echo "❌ Build failed - .next directory not found"
            exit 1
          fi
          
          echo "✅ Build complete"
          echo "📊 Build stats:"
          echo "  Total size: $(du -sh .next | cut -f1)"
          echo "  Static assets: $(du -sh .next/static | cut -f1)"
          echo "  Server bundles: $(du -sh .next/server | cut -f1)"
      
      # FOR PULL REQUESTS: Create lightweight verification report
      - name: Create PR verification artifact
        if: github.event_name == 'pull_request'
        run: |
          echo "📝 Creating lightweight PR verification artifact..."
          
          # Create a verification directory with minimal info
          mkdir -p pr-verification
          
          # Save build success info and statistics
          echo "Build Verification Report" > pr-verification/build-report.txt
          echo "=========================" >> pr-verification/build-report.txt
          echo "" >> pr-verification/build-report.txt
          echo "PR #${{ github.event.pull_request.number }}" >> pr-verification/build-report.txt
          echo "Commit: ${{ github.sha }}" >> pr-verification/build-report.txt
          echo "Branch: ${{ github.head_ref }}" >> pr-verification/build-report.txt
          echo "Build Time: $(date)" >> pr-verification/build-report.txt
          echo "" >> pr-verification/build-report.txt
          echo "Build Statistics:" >> pr-verification/build-report.txt
          echo "- Total .next size: $(du -sh .next | cut -f1)" >> pr-verification/build-report.txt
          echo "- Static assets: $(du -sh .next/static | cut -f1)" >> pr-verification/build-report.txt
          echo "- Server bundles: $(du -sh .next/server | cut -f1)" >> pr-verification/build-report.txt
          echo "- Source files: $(find src -type f -name '*.js' -o -name '*.jsx' -o -name '*.ts' -o -name '*.tsx' | wc -l)" >> pr-verification/build-report.txt
          echo "" >> pr-verification/build-report.txt
          echo "✅ All checks passed successfully" >> pr-verification/build-report.txt
      
      - name: Upload PR verification artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: pr-verification-${{ github.event.pull_request.number }}-${{ github.sha }}
          path: pr-verification/
          retention-days: 2
          compression-level: 6
      
      # FOR MAIN BRANCH: Create full deployment package
      # KEEPING ALL EXISTING RENAME LOGIC TO ENSURE SAFETY
      - name: Prepare deployment package
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "📦 Creating deployment package..."
          
          # Create a clean deployment directory
          mkdir -p deployment-package
          
          # Copy .next directory using tar to preserve structure
          echo "📁 Copying .next directory..."
          if [ -d ".next" ]; then
            tar -cf - .next | (cd deployment-package && tar -xf -)
            
            # Verify the copy worked
            if [ ! -d "deployment-package/.next" ]; then
              echo "❌ CRITICAL: Failed to copy .next to deployment-package!"
              echo "Source .next exists: $(ls -la .next | head -5)"
              echo "Destination contents: $(ls -la deployment-package/)"
              exit 1
            fi
            echo "✅ .next copied successfully"
          else
            echo "❌ .next directory not found in workspace!"
            exit 1
          fi
          
          # Copy other required files (keeping src for now - will remove in stage 2)
          echo "📁 Copying other files..."
          cp -r public deployment-package/ 2>/dev/null || echo "⚠️ public directory not found"
          cp -r src deployment-package/
          cp package.json deployment-package/
          cp package-lock.json deployment-package/
          cp next.config.mjs deployment-package/
          
          # Remove development artifacts
          echo "🧹 Cleaning development artifacts..."
          rm -rf deployment-package/.next/cache
          find deployment-package -name "*.map" -type f -delete
          
          # Verify .next exists in package
          echo "🔍 Final verification of deployment-package..."
          if [ ! -d "deployment-package/.next" ]; then
            echo "❌ FATAL: .next missing from deployment-package!"
            exit 1
          fi
          
          if [ ! -d "deployment-package/.next/static" ]; then
            echo "❌ FATAL: .next/static missing!"
            exit 1
          fi
          
          if [ ! -d "deployment-package/.next/server" ]; then
            echo "❌ FATAL: .next/server missing!"
            exit 1
          fi
          
          echo "✅ All critical directories verified"
      
      # KEEPING THE RENAME LOGIC AS-IS FOR SAFETY
      - name: Rename .next to avoid hidden directory issues
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "🔄 Renaming .next to next-build (keeping existing workaround for safety)..."
          if [ -d "deployment-package/.next" ]; then
            mv deployment-package/.next deployment-package/next-build
            echo "✅ Renamed .next to next-build"
            
            # Create a marker file to indicate renaming
            echo "true" > deployment-package/NEXT_WAS_RENAMED
            
            # Verify rename worked
            if [ ! -d "deployment-package/next-build" ]; then
              echo "❌ Rename failed!"
              exit 1
            fi
            echo "📁 Final package structure:"
            ls -la deployment-package/
          else
            echo "❌ Cannot rename - .next not found!"
            exit 1
          fi
      
      # Upload deployment artifact
      - name: Upload deployment artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ github.sha }}
          path: deployment-package/
          retention-days: 14
          compression-level: 6
          include-hidden-files: true
      
      - name: Post-build summary
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "📊 Build and artifact creation complete!"
          echo "Package contains:"
          echo "  - next-build/ (renamed from .next/)"
          echo "  - src/"
          echo "  - public/"
          echo "  - package.json"
          echo "  - package-lock.json"
          echo "  - next.config.mjs"
          echo "  - NEXT_WAS_RENAMED marker file"
          echo ""
          echo "🚀 Ready for deployment via deploy.yml workflow"