# CI Pipeline - Final optimization without src folder
# Location: .github/workflows/ci.yml
# Version: Stage 4 - Removed src from deployment artifacts

name: CI Pipeline

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

jobs:
  validate-and-build:
    name: Validate and Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies with retry logic
        run: |
          echo "🔍 Checking npm registry availability..."
          npm config list
          npm ping --registry https://registry.npmjs.org/ || echo "⚠️ Primary registry ping failed, continuing with retry logic"
          
          echo "📦 Installing dependencies with enhanced retry logic..."
          
          # Function to attempt npm ci with proper error handling
          install_deps() {
            local attempt=$1
            echo "Attempt $attempt: Running npm ci..."
            
            if timeout 600 npm ci --verbose --no-fund --no-audit; then
              echo "✅ Dependencies installed successfully on attempt $attempt"
              return 0
            else
              local exit_code=$?
              echo "❌ Attempt $attempt failed with exit code $exit_code"
              
              # Clear npm cache on failure
              echo "🧹 Clearing npm cache..."
              npm cache clean --force 2>/dev/null || true
              
              return $exit_code
            fi
          }
          
          # Retry logic with exponential backoff
          MAX_ATTEMPTS=5
          DELAY=30
          
          for i in $(seq 1 $MAX_ATTEMPTS); do
            if install_deps $i; then
              echo "🎉 Installation successful!"
              break
            elif [ $i -eq $MAX_ATTEMPTS ]; then
              echo "💥 All $MAX_ATTEMPTS attempts failed!"
              echo "Last attempt details:"
              echo "- Registry: $(npm config get registry)"
              echo "- Cache location: $(npm config get cache)"
              echo "- Node version: $(node --version)"
              echo "- NPM version: $(npm --version)"
              
              # Try alternative approach with npm install
              echo "🔄 Trying fallback: npm install instead of npm ci..."
              if timeout 600 npm install --verbose --no-fund --no-audit; then
                echo "✅ Fallback installation successful!"
                break
              else
                echo "💀 All installation methods failed. Exiting."
                exit 1
              fi
            else
              echo "⏳ Waiting ${DELAY} seconds before retry..."
              sleep $DELAY
              DELAY=$((DELAY * 2))  # Exponential backoff
            fi
          done
          
          echo "📋 Final dependency verification:"
          npm list --depth=0 || echo "⚠️ Some dependencies may have issues, but installation completed"
          
          # Specific check for problematic packages
          echo "🔍 Checking for zustand..."
          if npm list zustand 2>/dev/null; then
            echo "✅ zustand successfully installed"
          else
            echo "⚠️ zustand not found in dependency tree (may be indirect)"
          fi
      
      - name: Run linter
        run: npm run lint
      
      - name: Run tests
        run: npm test
      
      - name: Build project
        env:
          NEXT_PUBLIC_WEB3_SHARED_ACCESS_CODE: ${{ secrets.NEXT_PUBLIC_WEB3_SHARED_ACCESS_CODE }}
        run: |
          echo "🏗️ Building project..."
          npm run build
          
          # Verify build succeeded
          if [ ! -d ".next" ]; then
            echo "❌ Build failed - .next directory not found"
            exit 1
          fi
          
          echo "✅ Build complete"
          echo "📊 Build stats:"
          echo "  Total size: $(du -sh .next | cut -f1)"
          echo "  Static assets: $(du -sh .next/static | cut -f1)"
          echo "  Server bundles: $(du -sh .next/server | cut -f1)"
      
      # FOR PULL REQUESTS: Create lightweight verification report
      - name: Create PR verification artifact
        if: github.event_name == 'pull_request'
        run: |
          echo "📝 Creating PR verification report..."
          
          mkdir -p pr-verification
          
          echo "Build Verification Report" > pr-verification/build-report.txt
          echo "=========================" >> pr-verification/build-report.txt
          echo "" >> pr-verification/build-report.txt
          echo "PR #${{ github.event.pull_request.number }}" >> pr-verification/build-report.txt
          echo "Commit: ${{ github.sha }}" >> pr-verification/build-report.txt
          echo "Branch: ${{ github.head_ref }}" >> pr-verification/build-report.txt
          echo "Build Time: $(date)" >> pr-verification/build-report.txt
          echo "" >> pr-verification/build-report.txt
          echo "Build Statistics:" >> pr-verification/build-report.txt
          echo "- Total .next size: $(du -sh .next | cut -f1)" >> pr-verification/build-report.txt
          echo "- Source files analyzed: $(find src -type f -name '*.js' -o -name '*.jsx' -o -name '*.ts' -o -name '*.tsx' 2>/dev/null | wc -l)" >> pr-verification/build-report.txt
          echo "" >> pr-verification/build-report.txt
          echo "✅ All checks passed successfully" >> pr-verification/build-report.txt
      
      - name: Upload PR verification artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: pr-verification-${{ github.event.pull_request.number }}-${{ github.sha }}
          path: pr-verification/
          retention-days: 2
          compression-level: 6
      
      # FOR MAIN BRANCH: Create optimized deployment package
      - name: Prepare deployment package
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "📦 Creating optimized deployment package..."
          
          mkdir -p deployment-package
          
          # Copy ONLY production-necessary files
          # Note: src folder is NOT included - it's not needed for production!
          echo "📁 Copying production files..."
          cp -r .next deployment-package/
          cp -r public deployment-package/ 2>/dev/null || echo "ℹ️ No public directory"
          cp package.json deployment-package/
          cp package-lock.json deployment-package/
          cp next.config.mjs deployment-package/
          
          # Remove development artifacts to minimize size
          echo "🧹 Removing development artifacts..."
          rm -rf deployment-package/.next/cache
          find deployment-package -name "*.map" -type f -delete 2>/dev/null || true
          
          # Verify package integrity
          echo "🔍 Verifying deployment package..."
          if [ ! -d "deployment-package/.next" ]; then
            echo "❌ FATAL: .next missing from package!"
            exit 1
          fi
          
          if [ ! -d "deployment-package/.next/static" ]; then
            echo "❌ FATAL: .next/static missing!"
            exit 1
          fi
          
          if [ ! -d "deployment-package/.next/server" ]; then
            echo "❌ FATAL: .next/server missing!"
            exit 1
          fi
          
          if [ ! -f "deployment-package/package.json" ]; then
            echo "❌ FATAL: package.json missing!"
            exit 1
          fi
          
          echo "✅ Package verified successfully"
          echo ""
          echo "📊 Deployment package statistics:"
          echo "  Total size: $(du -sh deployment-package | cut -f1)"
          echo "  .next size: $(du -sh deployment-package/.next | cut -f1)"
          if [ -d "deployment-package/public" ]; then
            echo "  public size: $(du -sh deployment-package/public | cut -f1)"
          fi
          echo ""
          echo "📦 Package contents:"
          echo "  ✅ .next/ (compiled application)"
          echo "  ✅ public/ (static assets)"
          echo "  ✅ package.json, package-lock.json"
          echo "  ✅ next.config.mjs"
          echo "  ❌ src/ (NOT included - not needed in production)"
      
      # Upload optimized deployment artifact
      - name: Upload deployment artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ github.sha }}
          path: deployment-package/
          retention-days: 14
          compression-level: 6
          include-hidden-files: true
      
      - name: Optimization summary
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "🎉 Optimized deployment package created!"
          echo ""
          echo "Optimization results:"
          echo "✅ Removed src folder (not needed in production)"
          echo "✅ Removed .next/cache (development only)"
          echo "✅ Removed source maps (development only)"
          echo ""
          echo "The deployment package now contains ONLY what's needed for production."
          echo "Expected benefits: faster uploads, faster deployments, improved security."