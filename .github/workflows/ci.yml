# CI Pipeline - Validates code quality and creates artifacts
# Location: .github/workflows/ci.yml

name: CI Pipeline

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

jobs:
  # Job 1: Validate code quality
  validate:
    name: Validate Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
      
      - name: Run tests
        run: npm test
      
      - name: Build project
        run: npm run build
      
      - name: Validate build output
        run: |
          echo "‚úÖ Build validation complete"
          if [ ! -d ".next" ]; then
            echo "‚ùå Build failed - .next directory not found"
            exit 1
          fi
          echo "üìä Build stats:"
          echo "  Total size: $(du -sh .next | cut -f1)"
          echo "  Static assets: $(du -sh .next/static | cut -f1)"
          echo "  Server bundles: $(du -sh .next/server | cut -f1)"
  
  # Job 2: Create deployment artifact (only on main branch)
  build-artifact:
    name: Build Deployment Artifact
    runs-on: ubuntu-latest
    needs: validate

    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build for production
        run: |
          echo "üèóÔ∏è Building production version..."
          npm run build
          
          # CRITICAL: Verify .next exists after build
          if [ ! -d ".next" ]; then
            echo "‚ùå CRITICAL: .next directory not created by build!"
            ls -la
            exit 1
          fi
          
          echo "‚úÖ Build complete, .next directory confirmed"
          echo "üìä .next size: $(du -sh .next | cut -f1)"
      
      - name: Prepare deployment package
        run: |
          echo "üì¶ Creating deployment package..."
          
          # Create a clean deployment directory
          mkdir -p deployment-package
          
          # CRITICAL: Use explicit copy for .next with verification
          echo "üìÅ Copying .next directory..."
          if [ -d ".next" ]; then
            # Use tar to preserve directory structure for hidden directories
            tar -cf - .next | (cd deployment-package && tar -xf -)
            
            # Verify the copy worked
            if [ ! -d "deployment-package/.next" ]; then
              echo "‚ùå CRITICAL: Failed to copy .next to deployment-package!"
              echo "Source .next exists: $(ls -la .next | head -5)"
              echo "Destination contents: $(ls -la deployment-package/)"
              exit 1
            fi
            echo "‚úÖ .next copied successfully"
          else
            echo "‚ùå .next directory not found in workspace!"
            exit 1
          fi
          
          # Copy other required files
          echo "üìÅ Copying other files..."
          cp -r public deployment-package/ 2>/dev/null || echo "‚ö†Ô∏è public directory not found"
          cp -r src deployment-package/
          cp package.json deployment-package/
          cp package-lock.json deployment-package/
          cp next.config.mjs deployment-package/
          
          # Remove development artifacts
          echo "üßπ Cleaning development artifacts..."
          rm -rf deployment-package/.next/cache
          find deployment-package -name "*.map" -type f -delete
          
          # CRITICAL VERIFICATION: Check .next exists in package
          echo "üîç Final verification of deployment-package..."
          if [ ! -d "deployment-package/.next" ]; then
            echo "‚ùå FATAL: .next missing from deployment-package!"
            echo "Contents of deployment-package:"
            ls -la deployment-package/
            exit 1
          fi
          
          if [ ! -d "deployment-package/.next/static" ]; then
            echo "‚ùå FATAL: .next/static missing!"
            exit 1
          fi
          
          if [ ! -d "deployment-package/.next/server" ]; then
            echo "‚ùå FATAL: .next/server missing!"
            exit 1
          fi
          
          echo "üìã Deployment package contents (including hidden):"
          ls -la deployment-package/
          
          echo "üìä Package sizes:"
          du -sh deployment-package/.next/ 2>/dev/null || echo ".next not found"
          du -sh deployment-package/src/
          du -sh deployment-package/
          
          echo "‚úÖ Deployment package verified and ready"
      
      # Alternative approach: rename .next to avoid hidden directory issues
      - name: Rename .next to avoid hidden directory issues
        run: |
          echo "üîÑ Renaming .next to next-build to avoid hidden directory issues..."
          if [ -d "deployment-package/.next" ]; then
            mv deployment-package/.next deployment-package/next-build
            echo "‚úÖ Renamed .next to next-build"
            
            # Create a marker file to indicate renaming
            echo "true" > deployment-package/NEXT_WAS_RENAMED
            
            # Verify rename worked
            if [ ! -d "deployment-package/next-build" ]; then
              echo "‚ùå Rename failed!"
              exit 1
            fi
            echo "üìÅ Final package structure:"
            ls -la deployment-package/
          else
            echo "‚ùå Cannot rename - .next not found!"
            exit 1
          fi
      
      # Upload as a single artifact
      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ github.sha }}
          path: deployment-package/
          retention-days: 7
          compression-level: 6
          include-hidden-files: true  # IMPORTANT: Include hidden files
      
      - name: Post-upload verification
        run: |
          echo "üìÑ Artifact upload complete"
          echo "Package contained:"
          echo "  - next-build/ (renamed from .next/)"
          echo "  - src/"
          echo "  - public/"
          echo "  - package.json"
          echo "  - package-lock.json"
          echo "  - next.config.mjs"
          echo "  - NEXT_WAS_RENAMED marker file"
