# CI Pipeline - Validates code quality and creates artifacts
# Location: .github/workflows/ci.yml

name: CI Pipeline

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

jobs:
  # Job 1: Validate code quality
  validate:
    name: Validate Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
      
      - name: Run tests
        run: npm test
      
      - name: Build project
        run: npm run build
      
      # Critical: We build here to validate, but don't save the output
      # The actual deployment build will happen in the next job
      # This ensures consistency but doubles build time - acceptable tradeoff
      - name: Validate build output
        run: |
          echo "✅ Build validation complete"
          if [ ! -d ".next" ]; then
            echo "❌ Build failed - .next directory not found"
            exit 1
          fi
          echo "📊 Build stats:"
          echo "  Total size: $(du -sh .next | cut -f1)"
          echo "  Static assets: $(du -sh .next/static | cut -f1)"
          echo "  Server bundles: $(du -sh .next/server | cut -f1)"
  
  # Job 2: Create deployment artifact (only on main branch)
  build-artifact:
    name: Build Deployment Artifact
    runs-on: ubuntu-latest
    needs: validate
    # Only run on main branch after merge
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build for production
        run: |
          echo "🏗️ Building production version..."
          npm run build
          
          echo "✅ Build complete, preparing for artifact creation..."
      
      - name: Prepare deployment package
        run: |
          echo "📦 Creating deployment package..."
          
          # Create a clean deployment directory
          mkdir -p deployment-package
          
          # Copy ONLY what's needed for production
          # Using cp -r to preserve directory structure
          cp -r .next deployment-package/
          cp -r public deployment-package/
          cp package.json deployment-package/
          cp package-lock.json deployment-package/
          cp next.config.mjs deployment-package/
          
          # Copy source files (needed for API routes in App Router)
          cp -r src deployment-package/
          
          # Remove development artifacts from the package
          echo "🧹 Cleaning development artifacts..."
          rm -rf deployment-package/.next/cache
          find deployment-package -name "*.map" -type f -delete
          
          # Verify the package structure
          echo "📋 Deployment package contents:"
          ls -la deployment-package/
          
          echo "📊 Package sizes:"
          du -sh deployment-package/.next/
          du -sh deployment-package/src/
          du -sh deployment-package/
          
          # Final verification
          echo "✅ Verifying package integrity..."
          if [ ! -d "deployment-package/.next/static" ]; then
            echo "❌ Missing .next/static directory!"
            exit 1
          fi
          if [ ! -d "deployment-package/.next/server" ]; then
            echo "❌ Missing .next/server directory!"
            exit 1
          fi
          if [ ! -f "deployment-package/package.json" ]; then
            echo "❌ Missing package.json!"
            exit 1
          fi
          echo "✅ All critical files present"
      
      # Upload as a single artifact with clear structure
      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ github.sha }}
          path: deployment-package/
          retention-days: 7
          compression-level: 6  # Balanced compression
      
      - name: Create artifact manifest
        run: |
          echo "📄 Creating artifact manifest..."
          cat > artifact-manifest.json << EOF
          {
            "commit": "${{ github.sha }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "branch": "main",
            "artifact_name": "deployment-package-${{ github.sha }}"
          }
          EOF
          
          echo "Manifest created:"
          cat artifact-manifest.json
      
      - name: Upload manifest
        uses: actions/upload-artifact@v4
        with:
          name: manifest-${{ github.sha }}
          path: artifact-manifest.json
          retention-days: 7