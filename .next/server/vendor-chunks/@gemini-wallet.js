"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@gemini-wallet";
exports.ids = ["vendor-chunks/@gemini-wallet"];
exports.modules = {

/***/ "(ssr)/./node_modules/@gemini-wallet/core/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@gemini-wallet/core/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Communicator: () => (/* binding */ Communicator),\n/* harmony export */   DEFAULT_CHAIN_ID: () => (/* binding */ DEFAULT_CHAIN_ID),\n/* harmony export */   GeminiSdkEvent: () => (/* binding */ GeminiSdkEvent),\n/* harmony export */   GeminiStorage: () => (/* binding */ GeminiStorage),\n/* harmony export */   GeminiWallet: () => (/* binding */ GeminiWallet),\n/* harmony export */   GeminiWalletProvider: () => (/* binding */ GeminiWalletProvider),\n/* harmony export */   POPUP_HEIGHT: () => (/* binding */ POPUP_HEIGHT),\n/* harmony export */   POPUP_WIDTH: () => (/* binding */ POPUP_WIDTH),\n/* harmony export */   ProviderEventEmitter: () => (/* binding */ ProviderEventEmitter),\n/* harmony export */   SDK_BACKEND_URL: () => (/* binding */ SDK_BACKEND_URL),\n/* harmony export */   SDK_VERSION: () => (/* binding */ SDK_VERSION),\n/* harmony export */   STORAGE_ETH_ACCOUNTS_KEY: () => (/* binding */ STORAGE_ETH_ACCOUNTS_KEY),\n/* harmony export */   STORAGE_ETH_ACTIVE_CHAIN_KEY: () => (/* binding */ STORAGE_ETH_ACTIVE_CHAIN_KEY),\n/* harmony export */   STORAGE_PASSKEY_CREDENTIAL_KEY: () => (/* binding */ STORAGE_PASSKEY_CREDENTIAL_KEY),\n/* harmony export */   STORAGE_SETTINGS_KEY: () => (/* binding */ STORAGE_SETTINGS_KEY),\n/* harmony export */   STORAGE_SMART_ACCOUNT_KEY: () => (/* binding */ STORAGE_SMART_ACCOUNT_KEY),\n/* harmony export */   base64ToHex: () => (/* binding */ base64ToHex),\n/* harmony export */   bufferToBase64URLString: () => (/* binding */ bufferToBase64URLString),\n/* harmony export */   closePopup: () => (/* binding */ closePopup),\n/* harmony export */   convertSendValuesToBigInt: () => (/* binding */ convertSendValuesToBigInt),\n/* harmony export */   decodeBase64: () => (/* binding */ decodeBase64),\n/* harmony export */   encodeBase64: () => (/* binding */ encodeBase64),\n/* harmony export */   fetchRpcRequest: () => (/* binding */ fetchRpcRequest),\n/* harmony export */   generateRequestId: () => (/* binding */ generateRequestId),\n/* harmony export */   hexStringFromNumber: () => (/* binding */ hexStringFromNumber),\n/* harmony export */   openPopup: () => (/* binding */ openPopup),\n/* harmony export */   safeJsonStringify: () => (/* binding */ safeJsonStringify),\n/* harmony export */   utf8StringToBuffer: () => (/* binding */ utf8StringToBuffer),\n/* harmony export */   validateRpcRequestArgs: () => (/* binding */ validateRpcRequestArgs)\n/* harmony export */ });\nvar __create = Object.create;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __toESM = (mod, isNodeMode, target) => {\n  target = mod != null ? __create(__getProtoOf(mod)) : {};\n  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target;\n  for (let key of __getOwnPropNames(mod))\n    if (!__hasOwnProp.call(to, key))\n      __defProp(to, key, {\n        get: () => mod[key],\n        enumerable: true\n      });\n  return to;\n};\nvar __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);\n\n// node_modules/fast-safe-stringify/index.js\nvar require_fast_safe_stringify = __commonJS((exports, module) => {\n  module.exports = stringify;\n  stringify.default = stringify;\n  stringify.stable = deterministicStringify;\n  stringify.stableStringify = deterministicStringify;\n  var LIMIT_REPLACE_NODE = \"[...]\";\n  var CIRCULAR_REPLACE_NODE = \"[Circular]\";\n  var arr = [];\n  var replacerStack = [];\n  function defaultOptions() {\n    return {\n      depthLimit: Number.MAX_SAFE_INTEGER,\n      edgesLimit: Number.MAX_SAFE_INTEGER\n    };\n  }\n  function stringify(obj, replacer, spacer, options) {\n    if (typeof options === \"undefined\") {\n      options = defaultOptions();\n    }\n    decirc(obj, \"\", 0, [], undefined, 0, options);\n    var res;\n    try {\n      if (replacerStack.length === 0) {\n        res = JSON.stringify(obj, replacer, spacer);\n      } else {\n        res = JSON.stringify(obj, replaceGetterValues(replacer), spacer);\n      }\n    } catch (_) {\n      return JSON.stringify(\"[unable to serialize, circular reference is too complex to analyze]\");\n    } finally {\n      while (arr.length !== 0) {\n        var part = arr.pop();\n        if (part.length === 4) {\n          Object.defineProperty(part[0], part[1], part[3]);\n        } else {\n          part[0][part[1]] = part[2];\n        }\n      }\n    }\n    return res;\n  }\n  function setReplace(replace, val, k, parent) {\n    var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);\n    if (propertyDescriptor.get !== undefined) {\n      if (propertyDescriptor.configurable) {\n        Object.defineProperty(parent, k, { value: replace });\n        arr.push([parent, k, val, propertyDescriptor]);\n      } else {\n        replacerStack.push([val, k, replace]);\n      }\n    } else {\n      parent[k] = replace;\n      arr.push([parent, k, val]);\n    }\n  }\n  function decirc(val, k, edgeIndex, stack, parent, depth, options) {\n    depth += 1;\n    var i;\n    if (typeof val === \"object\" && val !== null) {\n      for (i = 0;i < stack.length; i++) {\n        if (stack[i] === val) {\n          setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);\n          return;\n        }\n      }\n      if (typeof options.depthLimit !== \"undefined\" && depth > options.depthLimit) {\n        setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n        return;\n      }\n      if (typeof options.edgesLimit !== \"undefined\" && edgeIndex + 1 > options.edgesLimit) {\n        setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n        return;\n      }\n      stack.push(val);\n      if (Array.isArray(val)) {\n        for (i = 0;i < val.length; i++) {\n          decirc(val[i], i, i, stack, val, depth, options);\n        }\n      } else {\n        var keys = Object.keys(val);\n        for (i = 0;i < keys.length; i++) {\n          var key = keys[i];\n          decirc(val[key], key, i, stack, val, depth, options);\n        }\n      }\n      stack.pop();\n    }\n  }\n  function compareFunction(a, b) {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  }\n  function deterministicStringify(obj, replacer, spacer, options) {\n    if (typeof options === \"undefined\") {\n      options = defaultOptions();\n    }\n    var tmp = deterministicDecirc(obj, \"\", 0, [], undefined, 0, options) || obj;\n    var res;\n    try {\n      if (replacerStack.length === 0) {\n        res = JSON.stringify(tmp, replacer, spacer);\n      } else {\n        res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer);\n      }\n    } catch (_) {\n      return JSON.stringify(\"[unable to serialize, circular reference is too complex to analyze]\");\n    } finally {\n      while (arr.length !== 0) {\n        var part = arr.pop();\n        if (part.length === 4) {\n          Object.defineProperty(part[0], part[1], part[3]);\n        } else {\n          part[0][part[1]] = part[2];\n        }\n      }\n    }\n    return res;\n  }\n  function deterministicDecirc(val, k, edgeIndex, stack, parent, depth, options) {\n    depth += 1;\n    var i;\n    if (typeof val === \"object\" && val !== null) {\n      for (i = 0;i < stack.length; i++) {\n        if (stack[i] === val) {\n          setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);\n          return;\n        }\n      }\n      try {\n        if (typeof val.toJSON === \"function\") {\n          return;\n        }\n      } catch (_) {\n        return;\n      }\n      if (typeof options.depthLimit !== \"undefined\" && depth > options.depthLimit) {\n        setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n        return;\n      }\n      if (typeof options.edgesLimit !== \"undefined\" && edgeIndex + 1 > options.edgesLimit) {\n        setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n        return;\n      }\n      stack.push(val);\n      if (Array.isArray(val)) {\n        for (i = 0;i < val.length; i++) {\n          deterministicDecirc(val[i], i, i, stack, val, depth, options);\n        }\n      } else {\n        var tmp = {};\n        var keys = Object.keys(val).sort(compareFunction);\n        for (i = 0;i < keys.length; i++) {\n          var key = keys[i];\n          deterministicDecirc(val[key], key, i, stack, val, depth, options);\n          tmp[key] = val[key];\n        }\n        if (typeof parent !== \"undefined\") {\n          arr.push([parent, k, val]);\n          parent[k] = tmp;\n        } else {\n          return tmp;\n        }\n      }\n      stack.pop();\n    }\n  }\n  function replaceGetterValues(replacer) {\n    replacer = typeof replacer !== \"undefined\" ? replacer : function(k, v) {\n      return v;\n    };\n    return function(key, val) {\n      if (replacerStack.length > 0) {\n        for (var i = 0;i < replacerStack.length; i++) {\n          var part = replacerStack[i];\n          if (part[1] === key && part[0] === val) {\n            val = part[2];\n            replacerStack.splice(i, 1);\n            break;\n          }\n        }\n      }\n      return replacer.call(this, key, val);\n    };\n  }\n});\n\n// node_modules/eventemitter3/index.js\nvar require_eventemitter3 = __commonJS((exports, module) => {\n  var has = Object.prototype.hasOwnProperty;\n  var prefix = \"~\";\n  function Events() {}\n  if (Object.create) {\n    Events.prototype = Object.create(null);\n    if (!new Events().__proto__)\n      prefix = false;\n  }\n  function EE(fn, context, once) {\n    this.fn = fn;\n    this.context = context;\n    this.once = once || false;\n  }\n  function addListener(emitter, event, fn, context, once) {\n    if (typeof fn !== \"function\") {\n      throw new TypeError(\"The listener must be a function\");\n    }\n    var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;\n    if (!emitter._events[evt])\n      emitter._events[evt] = listener, emitter._eventsCount++;\n    else if (!emitter._events[evt].fn)\n      emitter._events[evt].push(listener);\n    else\n      emitter._events[evt] = [emitter._events[evt], listener];\n    return emitter;\n  }\n  function clearEvent(emitter, evt) {\n    if (--emitter._eventsCount === 0)\n      emitter._events = new Events;\n    else\n      delete emitter._events[evt];\n  }\n  function EventEmitter() {\n    this._events = new Events;\n    this._eventsCount = 0;\n  }\n  EventEmitter.prototype.eventNames = function eventNames() {\n    var names = [], events, name;\n    if (this._eventsCount === 0)\n      return names;\n    for (name in events = this._events) {\n      if (has.call(events, name))\n        names.push(prefix ? name.slice(1) : name);\n    }\n    if (Object.getOwnPropertySymbols) {\n      return names.concat(Object.getOwnPropertySymbols(events));\n    }\n    return names;\n  };\n  EventEmitter.prototype.listeners = function listeners(event) {\n    var evt = prefix ? prefix + event : event, handlers = this._events[evt];\n    if (!handlers)\n      return [];\n    if (handlers.fn)\n      return [handlers.fn];\n    for (var i = 0, l = handlers.length, ee = new Array(l);i < l; i++) {\n      ee[i] = handlers[i].fn;\n    }\n    return ee;\n  };\n  EventEmitter.prototype.listenerCount = function listenerCount(event) {\n    var evt = prefix ? prefix + event : event, listeners = this._events[evt];\n    if (!listeners)\n      return 0;\n    if (listeners.fn)\n      return 1;\n    return listeners.length;\n  };\n  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n    var evt = prefix ? prefix + event : event;\n    if (!this._events[evt])\n      return false;\n    var listeners = this._events[evt], len = arguments.length, args, i;\n    if (listeners.fn) {\n      if (listeners.once)\n        this.removeListener(event, listeners.fn, undefined, true);\n      switch (len) {\n        case 1:\n          return listeners.fn.call(listeners.context), true;\n        case 2:\n          return listeners.fn.call(listeners.context, a1), true;\n        case 3:\n          return listeners.fn.call(listeners.context, a1, a2), true;\n        case 4:\n          return listeners.fn.call(listeners.context, a1, a2, a3), true;\n        case 5:\n          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n        case 6:\n          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n      }\n      for (i = 1, args = new Array(len - 1);i < len; i++) {\n        args[i - 1] = arguments[i];\n      }\n      listeners.fn.apply(listeners.context, args);\n    } else {\n      var length = listeners.length, j;\n      for (i = 0;i < length; i++) {\n        if (listeners[i].once)\n          this.removeListener(event, listeners[i].fn, undefined, true);\n        switch (len) {\n          case 1:\n            listeners[i].fn.call(listeners[i].context);\n            break;\n          case 2:\n            listeners[i].fn.call(listeners[i].context, a1);\n            break;\n          case 3:\n            listeners[i].fn.call(listeners[i].context, a1, a2);\n            break;\n          case 4:\n            listeners[i].fn.call(listeners[i].context, a1, a2, a3);\n            break;\n          default:\n            if (!args)\n              for (j = 1, args = new Array(len - 1);j < len; j++) {\n                args[j - 1] = arguments[j];\n              }\n            listeners[i].fn.apply(listeners[i].context, args);\n        }\n      }\n    }\n    return true;\n  };\n  EventEmitter.prototype.on = function on(event, fn, context) {\n    return addListener(this, event, fn, context, false);\n  };\n  EventEmitter.prototype.once = function once(event, fn, context) {\n    return addListener(this, event, fn, context, true);\n  };\n  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n    var evt = prefix ? prefix + event : event;\n    if (!this._events[evt])\n      return this;\n    if (!fn) {\n      clearEvent(this, evt);\n      return this;\n    }\n    var listeners = this._events[evt];\n    if (listeners.fn) {\n      if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {\n        clearEvent(this, evt);\n      }\n    } else {\n      for (var i = 0, events = [], length = listeners.length;i < length; i++) {\n        if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {\n          events.push(listeners[i]);\n        }\n      }\n      if (events.length)\n        this._events[evt] = events.length === 1 ? events[0] : events;\n      else\n        clearEvent(this, evt);\n    }\n    return this;\n  };\n  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n    var evt;\n    if (event) {\n      evt = prefix ? prefix + event : event;\n      if (this._events[evt])\n        clearEvent(this, evt);\n    } else {\n      this._events = new Events;\n      this._eventsCount = 0;\n    }\n    return this;\n  };\n  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n  EventEmitter.prefixed = prefix;\n  EventEmitter.EventEmitter = EventEmitter;\n  if (typeof module !== \"undefined\") {\n    module.exports = EventEmitter;\n  }\n});\n\n// node_modules/viem/_esm/utils/data/isHex.js\nfunction isHex(value, { strict = true } = {}) {\n  if (!value)\n    return false;\n  if (typeof value !== \"string\")\n    return false;\n  return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith(\"0x\");\n}\n\n// node_modules/@metamask/superstruct/dist/error.mjs\nclass StructError extends TypeError {\n  constructor(failure, failures) {\n    let cached;\n    const { message, explanation, ...rest } = failure;\n    const { path } = failure;\n    const cause = path.length === 0 ? message : `At path: ${path.join(\".\")} -- ${message}`;\n    super(explanation ?? cause);\n    if (explanation !== null && explanation !== undefined) {\n      this.cause = cause;\n    }\n    Object.assign(this, rest);\n    this.name = this.constructor.name;\n    this.failures = () => {\n      return cached ?? (cached = [failure, ...failures()]);\n    };\n  }\n}\n\n// node_modules/@metamask/superstruct/dist/utils.mjs\nfunction isIterable(value) {\n  return isObject(value) && typeof value[Symbol.iterator] === \"function\";\n}\nfunction isObject(value) {\n  return typeof value === \"object\" && value !== null;\n}\nfunction print(value) {\n  if (typeof value === \"symbol\") {\n    return value.toString();\n  }\n  return typeof value === \"string\" ? JSON.stringify(value) : `${value}`;\n}\nfunction shiftIterator(input) {\n  const { done, value } = input.next();\n  return done ? undefined : value;\n}\nfunction toFailure(result, context, struct, value) {\n  if (result === true) {\n    return;\n  } else if (result === false) {\n    result = {};\n  } else if (typeof result === \"string\") {\n    result = { message: result };\n  }\n  const { path, branch } = context;\n  const { type } = struct;\n  const { refinement, message = `Expected a value of type \\`${type}\\`${refinement ? ` with refinement \\`${refinement}\\`` : \"\"}, but received: \\`${print(value)}\\`` } = result;\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message\n  };\n}\nfunction* toFailures(result, context, struct, value) {\n  if (!isIterable(result)) {\n    result = [result];\n  }\n  for (const validationResult of result) {\n    const failure = toFailure(validationResult, context, struct, value);\n    if (failure) {\n      yield failure;\n    }\n  }\n}\nfunction* run(value, struct, options = {}) {\n  const { path = [], branch = [value], coerce = false, mask = false } = options;\n  const context = { path, branch };\n  if (coerce) {\n    value = struct.coercer(value, context);\n    if (mask && struct.type !== \"type\" && isObject(struct.schema) && isObject(value) && !Array.isArray(value)) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key];\n        }\n      }\n    }\n  }\n  let status = \"valid\";\n  for (const failure of struct.validator(value, context)) {\n    failure.explanation = options.message;\n    status = \"not_valid\";\n    yield [failure, undefined];\n  }\n  for (let [innerKey, innerValue, innerStruct] of struct.entries(value, context)) {\n    const iterable = run(innerValue, innerStruct, {\n      path: innerKey === undefined ? path : [...path, innerKey],\n      branch: innerKey === undefined ? branch : [...branch, innerValue],\n      coerce,\n      mask,\n      message: options.message\n    });\n    for (const result of iterable) {\n      if (result[0]) {\n        status = result[0].refinement === null || result[0].refinement === undefined ? \"not_valid\" : \"not_refined\";\n        yield [result[0], undefined];\n      } else if (coerce) {\n        innerValue = result[1];\n        if (innerKey === undefined) {\n          value = innerValue;\n        } else if (value instanceof Map) {\n          value.set(innerKey, innerValue);\n        } else if (value instanceof Set) {\n          value.add(innerValue);\n        } else if (isObject(value)) {\n          if (innerValue !== undefined || innerKey in value) {\n            value[innerKey] = innerValue;\n          }\n        }\n      }\n    }\n  }\n  if (status !== \"not_valid\") {\n    for (const failure of struct.refiner(value, context)) {\n      failure.explanation = options.message;\n      status = \"not_refined\";\n      yield [failure, undefined];\n    }\n  }\n  if (status === \"valid\") {\n    yield [undefined, value];\n  }\n}\n\n// node_modules/@metamask/superstruct/dist/struct.mjs\nclass Struct {\n  constructor(props) {\n    const { type, schema, validator, refiner, coercer = (value) => value, entries = function* () {} } = props;\n    this.type = type;\n    this.schema = schema;\n    this.entries = entries;\n    this.coercer = coercer;\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context);\n        return toFailures(result, context, this, value);\n      };\n    } else {\n      this.validator = () => [];\n    }\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context);\n        return toFailures(result, context, this, value);\n      };\n    } else {\n      this.refiner = () => [];\n    }\n  }\n  assert(value, message) {\n    return assert(value, this, message);\n  }\n  create(value, message) {\n    return create(value, this, message);\n  }\n  is(value) {\n    return is(value, this);\n  }\n  mask(value, message) {\n    return mask(value, this, message);\n  }\n  validate(value, options = {}) {\n    return validate(value, this, options);\n  }\n}\nvar ExactOptionalBrand = \"EXACT_OPTIONAL\";\n\nclass ExactOptionalStruct extends Struct {\n  constructor(props) {\n    super({\n      ...props,\n      type: `exact optional ${props.type}`\n    });\n    this.brand = ExactOptionalBrand;\n  }\n  static isExactOptional(value) {\n    return isObject(value) && \"brand\" in value && value.brand === ExactOptionalBrand;\n  }\n}\nfunction assert(value, struct, message) {\n  const result = validate(value, struct, { message });\n  if (result[0]) {\n    throw result[0];\n  }\n}\nfunction create(value, struct, message) {\n  const result = validate(value, struct, { coerce: true, message });\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\nfunction mask(value, struct, message) {\n  const result = validate(value, struct, { coerce: true, mask: true, message });\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\nfunction is(value, struct) {\n  const result = validate(value, struct);\n  return !result[0];\n}\nfunction validate(value, struct, options = {}) {\n  const tuples = run(value, struct, options);\n  const tuple = shiftIterator(tuples);\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const innerTuple of tuples) {\n        if (innerTuple[0]) {\n          yield innerTuple[0];\n        }\n      }\n    });\n    return [error, undefined];\n  }\n  const validatedValue = tuple[1];\n  return [undefined, validatedValue];\n}\n\n// node_modules/@metamask/superstruct/dist/structs/utilities.mjs\nfunction define(name, validator) {\n  return new Struct({ type: name, schema: null, validator });\n}\n\n// node_modules/@metamask/superstruct/dist/structs/types.mjs\nfunction any() {\n  return define(\"any\", () => true);\n}\nfunction array(Element) {\n  return new Struct({\n    type: \"array\",\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [index, arrayValue] of value.entries()) {\n          yield [index, arrayValue, Element];\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value;\n    },\n    validator(value) {\n      return Array.isArray(value) || `Expected an array value, but received: ${print(value)}`;\n    }\n  });\n}\nfunction integer() {\n  return define(\"integer\", (value) => {\n    return typeof value === \"number\" && !isNaN(value) && Number.isInteger(value) || `Expected an integer, but received: ${print(value)}`;\n  });\n}\nfunction literal(constant) {\n  const description = print(constant);\n  const valueType = typeof constant;\n  return new Struct({\n    type: \"literal\",\n    schema: valueType === \"string\" || valueType === \"number\" || valueType === \"boolean\" ? constant : null,\n    validator(value) {\n      return value === constant || `Expected the literal \\`${description}\\`, but received: ${print(value)}`;\n    }\n  });\n}\nfunction never() {\n  return define(\"never\", () => false);\n}\nfunction nullable(struct) {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx)\n  });\n}\nfunction number() {\n  return define(\"number\", (value) => {\n    return typeof value === \"number\" && !isNaN(value) || `Expected a number, but received: ${print(value)}`;\n  });\n}\nfunction object(schema) {\n  const knowns = schema ? Object.keys(schema) : [];\n  const Never = never();\n  return new Struct({\n    type: \"object\",\n    schema: schema ?? null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value));\n        for (const key of knowns) {\n          unknowns.delete(key);\n          const propertySchema = schema[key];\n          if (ExactOptionalStruct.isExactOptional(propertySchema) && !Object.prototype.hasOwnProperty.call(value, key)) {\n            continue;\n          }\n          yield [key, value[key], schema[key]];\n        }\n        for (const key of unknowns) {\n          yield [key, value[key], Never];\n        }\n      }\n    },\n    validator(value) {\n      return isObject(value) || `Expected an object, but received: ${print(value)}`;\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value;\n    }\n  });\n}\nfunction optional(struct) {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx)\n  });\n}\nfunction record(Key, Value) {\n  return new Struct({\n    type: \"record\",\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const objectKey in value) {\n          const objectValue = value[objectKey];\n          yield [objectKey, objectKey, Key];\n          yield [objectKey, objectValue, Value];\n        }\n      }\n    },\n    validator(value) {\n      return isObject(value) || `Expected an object, but received: ${print(value)}`;\n    }\n  });\n}\nfunction string() {\n  return define(\"string\", (value) => {\n    return typeof value === \"string\" || `Expected a string, but received: ${print(value)}`;\n  });\n}\nfunction union(Structs) {\n  const description = Structs.map((struct) => struct.type).join(\" | \");\n  return new Struct({\n    type: \"union\",\n    schema: null,\n    coercer(value) {\n      for (const InnerStruct of Structs) {\n        const [error, coerced] = InnerStruct.validate(value, { coerce: true });\n        if (!error) {\n          return coerced;\n        }\n      }\n      return value;\n    },\n    validator(value, ctx) {\n      const failures = [];\n      for (const InnerStruct of Structs) {\n        const [...tuples] = run(value, InnerStruct, ctx);\n        const [first] = tuples;\n        if (!first?.[0]) {\n          return [];\n        }\n        for (const [failure] of tuples) {\n          if (failure) {\n            failures.push(failure);\n          }\n        }\n      }\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(value)}`,\n        ...failures\n      ];\n    }\n  });\n}\nfunction unknown() {\n  return define(\"unknown\", () => true);\n}\n\n// node_modules/@metamask/superstruct/dist/structs/coercions.mjs\nfunction coerce(struct, condition, coercer) {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition) ? struct.coercer(coercer(value, ctx), ctx) : struct.coercer(value, ctx);\n    }\n  });\n}\n\n// node_modules/@metamask/superstruct/dist/structs/refinements.mjs\nfunction refine(struct, name, refiner) {\n  return new Struct({\n    ...struct,\n    *refiner(value, ctx) {\n      yield* struct.refiner(value, ctx);\n      const result = refiner(value, ctx);\n      const failures = toFailures(result, ctx, struct, value);\n      for (const failure of failures) {\n        yield { ...failure, refinement: name };\n      }\n    }\n  });\n}\n\n// node_modules/@metamask/utils/dist/misc.mjs\nfunction isObject2(value) {\n  return Boolean(value) && typeof value === \"object\" && !Array.isArray(value);\n}\nvar hasProperty = (objectToCheck, name) => Object.hasOwnProperty.call(objectToCheck, name);\nvar JsonSize;\n(function(JsonSize2) {\n  JsonSize2[JsonSize2[\"Null\"] = 4] = \"Null\";\n  JsonSize2[JsonSize2[\"Comma\"] = 1] = \"Comma\";\n  JsonSize2[JsonSize2[\"Wrapper\"] = 1] = \"Wrapper\";\n  JsonSize2[JsonSize2[\"True\"] = 4] = \"True\";\n  JsonSize2[JsonSize2[\"False\"] = 5] = \"False\";\n  JsonSize2[JsonSize2[\"Quote\"] = 1] = \"Quote\";\n  JsonSize2[JsonSize2[\"Colon\"] = 1] = \"Colon\";\n  JsonSize2[JsonSize2[\"Date\"] = 24] = \"Date\";\n})(JsonSize = JsonSize || (JsonSize = {}));\nfunction isPlainObject(value) {\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n  try {\n    let proto = value;\n    while (Object.getPrototypeOf(proto) !== null) {\n      proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(value) === proto;\n  } catch (_) {\n    return false;\n  }\n}\n\n// node_modules/@metamask/utils/dist/json.mjs\nvar object2 = (schema) => object(schema);\nfunction hasOptional({ path, branch }) {\n  const field = path[path.length - 1];\n  return hasProperty(branch[branch.length - 2], field);\n}\nfunction exactOptional(struct) {\n  return new Struct({\n    ...struct,\n    type: `optional ${struct.type}`,\n    validator: (value, context) => !hasOptional(context) || struct.validator(value, context),\n    refiner: (value, context) => !hasOptional(context) || struct.refiner(value, context)\n  });\n}\nfunction validateJson(json) {\n  if (json === null || typeof json === \"boolean\" || typeof json === \"string\") {\n    return true;\n  }\n  if (typeof json === \"number\" && Number.isFinite(json)) {\n    return true;\n  }\n  if (typeof json === \"object\") {\n    let every = true;\n    if (Array.isArray(json)) {\n      for (let i = 0;i < json.length; i++) {\n        if (!validateJson(json[i])) {\n          every = false;\n          break;\n        }\n      }\n      return every;\n    }\n    const entries = Object.entries(json);\n    for (let i = 0;i < entries.length; i++) {\n      if (typeof entries[i][0] !== \"string\" || !validateJson(entries[i][1])) {\n        every = false;\n        break;\n      }\n    }\n    return every;\n  }\n  return false;\n}\nvar UnsafeJsonStruct = define(\"JSON\", (json) => validateJson(json));\nvar JsonStruct = coerce(UnsafeJsonStruct, refine(any(), \"JSON\", (value) => is(value, UnsafeJsonStruct)), (value) => JSON.parse(JSON.stringify(value, (propKey, propValue) => {\n  if (propKey === \"__proto__\" || propKey === \"constructor\") {\n    return;\n  }\n  return propValue;\n})));\nfunction isValidJson(value) {\n  try {\n    getSafeJson(value);\n    return true;\n  } catch {\n    return false;\n  }\n}\nfunction getSafeJson(value) {\n  return create(value, JsonStruct);\n}\nvar jsonrpc2 = \"2.0\";\nvar JsonRpcVersionStruct = literal(jsonrpc2);\nvar JsonRpcIdStruct = nullable(union([number(), string()]));\nvar JsonRpcErrorStruct = object2({\n  code: integer(),\n  message: string(),\n  data: exactOptional(JsonStruct),\n  stack: exactOptional(string())\n});\nvar JsonRpcParamsStruct = union([record(string(), JsonStruct), array(JsonStruct)]);\nvar JsonRpcRequestStruct = object2({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  method: string(),\n  params: exactOptional(JsonRpcParamsStruct)\n});\nvar JsonRpcNotificationStruct = object2({\n  jsonrpc: JsonRpcVersionStruct,\n  method: string(),\n  params: exactOptional(JsonRpcParamsStruct)\n});\nvar PendingJsonRpcResponseStruct = object({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  result: optional(unknown()),\n  error: optional(JsonRpcErrorStruct)\n});\nvar JsonRpcSuccessStruct = object2({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  result: JsonStruct\n});\nvar JsonRpcFailureStruct = object2({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  error: JsonRpcErrorStruct\n});\nvar JsonRpcResponseStruct = union([\n  JsonRpcSuccessStruct,\n  JsonRpcFailureStruct\n]);\nfunction isJsonRpcError(value) {\n  return is(value, JsonRpcErrorStruct);\n}\n\n// node_modules/@metamask/rpc-errors/dist/classes.mjs\nvar import_fast_safe_stringify = __toESM(require_fast_safe_stringify(), 1);\n\n// node_modules/@metamask/rpc-errors/dist/error-constants.mjs\nvar errorCodes = {\n  rpc: {\n    invalidInput: -32000,\n    resourceNotFound: -32001,\n    resourceUnavailable: -32002,\n    transactionRejected: -32003,\n    methodNotSupported: -32004,\n    limitExceeded: -32005,\n    parse: -32700,\n    invalidRequest: -32600,\n    methodNotFound: -32601,\n    invalidParams: -32602,\n    internal: -32603\n  },\n  provider: {\n    userRejectedRequest: 4001,\n    unauthorized: 4100,\n    unsupportedMethod: 4200,\n    disconnected: 4900,\n    chainDisconnected: 4901\n  }\n};\nvar errorValues = {\n  \"-32700\": {\n    standard: \"JSON RPC 2.0\",\n    message: \"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.\"\n  },\n  \"-32600\": {\n    standard: \"JSON RPC 2.0\",\n    message: \"The JSON sent is not a valid Request object.\"\n  },\n  \"-32601\": {\n    standard: \"JSON RPC 2.0\",\n    message: \"The method does not exist / is not available.\"\n  },\n  \"-32602\": {\n    standard: \"JSON RPC 2.0\",\n    message: \"Invalid method parameter(s).\"\n  },\n  \"-32603\": {\n    standard: \"JSON RPC 2.0\",\n    message: \"Internal JSON-RPC error.\"\n  },\n  \"-32000\": {\n    standard: \"EIP-1474\",\n    message: \"Invalid input.\"\n  },\n  \"-32001\": {\n    standard: \"EIP-1474\",\n    message: \"Resource not found.\"\n  },\n  \"-32002\": {\n    standard: \"EIP-1474\",\n    message: \"Resource unavailable.\"\n  },\n  \"-32003\": {\n    standard: \"EIP-1474\",\n    message: \"Transaction rejected.\"\n  },\n  \"-32004\": {\n    standard: \"EIP-1474\",\n    message: \"Method not supported.\"\n  },\n  \"-32005\": {\n    standard: \"EIP-1474\",\n    message: \"Request limit exceeded.\"\n  },\n  \"4001\": {\n    standard: \"EIP-1193\",\n    message: \"User rejected the request.\"\n  },\n  \"4100\": {\n    standard: \"EIP-1193\",\n    message: \"The requested account and/or method has not been authorized by the user.\"\n  },\n  \"4200\": {\n    standard: \"EIP-1193\",\n    message: \"The requested method is not supported by this Ethereum provider.\"\n  },\n  \"4900\": {\n    standard: \"EIP-1193\",\n    message: \"The provider is disconnected from all chains.\"\n  },\n  \"4901\": {\n    standard: \"EIP-1193\",\n    message: \"The provider is disconnected from the specified chain.\"\n  }\n};\n\n// node_modules/@metamask/rpc-errors/dist/utils.mjs\nvar FALLBACK_ERROR_CODE = errorCodes.rpc.internal;\nvar FALLBACK_MESSAGE = \"Unspecified error message. This is a bug, please report it.\";\nvar FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE)\n};\nvar JSON_RPC_SERVER_ERROR_MESSAGE = \"Unspecified server error.\";\nfunction getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {\n  if (isValidCode(code)) {\n    const codeString = code.toString();\n    if (hasProperty(errorValues, codeString)) {\n      return errorValues[codeString].message;\n    }\n    if (isJsonRpcServerError(code)) {\n      return JSON_RPC_SERVER_ERROR_MESSAGE;\n    }\n  }\n  return fallbackMessage;\n}\nfunction isValidCode(code) {\n  return Number.isInteger(code);\n}\nfunction serializeError(error, { fallbackError = FALLBACK_ERROR, shouldIncludeStack = true, shouldPreserveMessage = true } = {}) {\n  if (!isJsonRpcError(fallbackError)) {\n    throw new Error(\"Must provide fallback error with integer number code and string message.\");\n  }\n  const serialized = buildError(error, fallbackError, shouldPreserveMessage);\n  if (!shouldIncludeStack) {\n    delete serialized.stack;\n  }\n  return serialized;\n}\nfunction buildError(error, fallbackError, shouldPreserveMessage) {\n  if (error && typeof error === \"object\" && \"serialize\" in error && typeof error.serialize === \"function\") {\n    return error.serialize();\n  }\n  if (isJsonRpcError(error)) {\n    return error;\n  }\n  const originalMessage = getOriginalMessage(error);\n  const cause = serializeCause(error);\n  const fallbackWithCause = {\n    ...fallbackError,\n    ...shouldPreserveMessage && originalMessage && { message: originalMessage },\n    data: { cause }\n  };\n  return fallbackWithCause;\n}\nfunction getOriginalMessage(error) {\n  if (isObject2(error) && hasProperty(error, \"message\") && typeof error.message === \"string\" && error.message.length > 0) {\n    return error.message;\n  }\n  return;\n}\nfunction isJsonRpcServerError(code) {\n  return code >= -32099 && code <= -32000;\n}\nfunction serializeCause(error) {\n  if (Array.isArray(error)) {\n    return error.map((entry) => {\n      if (isValidJson(entry)) {\n        return entry;\n      } else if (isObject2(entry)) {\n        return serializeObject(entry);\n      }\n      return null;\n    });\n  } else if (isObject2(error)) {\n    return serializeObject(error);\n  }\n  if (isValidJson(error)) {\n    return error;\n  }\n  return null;\n}\nfunction serializeObject(object3) {\n  return Object.getOwnPropertyNames(object3).reduce((acc, key) => {\n    const value = object3[key];\n    if (isValidJson(value)) {\n      acc[key] = value;\n    }\n    return acc;\n  }, {});\n}\nfunction dataHasCause(data) {\n  return isObject2(data) && hasProperty(data, \"cause\") && isObject2(data.cause);\n}\n\n// node_modules/@metamask/rpc-errors/dist/classes.mjs\nfunction $importDefault(module) {\n  if (module?.__esModule) {\n    return module.default;\n  }\n  return module;\n}\nvar safeStringify = $importDefault(import_fast_safe_stringify.default);\n\nclass JsonRpcError extends Error {\n  constructor(code, message, data) {\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a non-empty string.');\n    }\n    if (dataHasCause(data)) {\n      super(message, { cause: data.cause });\n      if (!hasProperty(this, \"cause\")) {\n        Object.assign(this, { cause: data.cause });\n      }\n    } else {\n      super(message);\n    }\n    if (data !== undefined) {\n      this.data = data;\n    }\n    this.code = code;\n  }\n  serialize() {\n    const serialized = {\n      code: this.code,\n      message: this.message\n    };\n    if (this.data !== undefined) {\n      serialized.data = this.data;\n      if (isPlainObject(this.data)) {\n        serialized.data.cause = serializeCause(this.data.cause);\n      }\n    }\n    if (this.stack) {\n      serialized.stack = this.stack;\n    }\n    return serialized;\n  }\n  toString() {\n    return safeStringify(this.serialize(), stringifyReplacer, 2);\n  }\n}\n\nclass EthereumProviderError extends JsonRpcError {\n  constructor(code, message, data) {\n    if (!isValidEthProviderCode(code)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(code, message, data);\n  }\n}\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\nfunction stringifyReplacer(_, value) {\n  if (value === \"[Circular]\") {\n    return;\n  }\n  return value;\n}\n// node_modules/@metamask/rpc-errors/dist/errors.mjs\nvar rpcErrors = {\n  parse: (arg) => getJsonRpcError(errorCodes.rpc.parse, arg),\n  invalidRequest: (arg) => getJsonRpcError(errorCodes.rpc.invalidRequest, arg),\n  invalidParams: (arg) => getJsonRpcError(errorCodes.rpc.invalidParams, arg),\n  methodNotFound: (arg) => getJsonRpcError(errorCodes.rpc.methodNotFound, arg),\n  internal: (arg) => getJsonRpcError(errorCodes.rpc.internal, arg),\n  server: (opts) => {\n    if (!opts || typeof opts !== \"object\" || Array.isArray(opts)) {\n      throw new Error(\"Ethereum RPC Server errors must provide single object argument.\");\n    }\n    const { code } = opts;\n    if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n      throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n    }\n    return getJsonRpcError(code, opts);\n  },\n  invalidInput: (arg) => getJsonRpcError(errorCodes.rpc.invalidInput, arg),\n  resourceNotFound: (arg) => getJsonRpcError(errorCodes.rpc.resourceNotFound, arg),\n  resourceUnavailable: (arg) => getJsonRpcError(errorCodes.rpc.resourceUnavailable, arg),\n  transactionRejected: (arg) => getJsonRpcError(errorCodes.rpc.transactionRejected, arg),\n  methodNotSupported: (arg) => getJsonRpcError(errorCodes.rpc.methodNotSupported, arg),\n  limitExceeded: (arg) => getJsonRpcError(errorCodes.rpc.limitExceeded, arg)\n};\nvar providerErrors = {\n  userRejectedRequest: (arg) => {\n    return getEthProviderError(errorCodes.provider.userRejectedRequest, arg);\n  },\n  unauthorized: (arg) => {\n    return getEthProviderError(errorCodes.provider.unauthorized, arg);\n  },\n  unsupportedMethod: (arg) => {\n    return getEthProviderError(errorCodes.provider.unsupportedMethod, arg);\n  },\n  disconnected: (arg) => {\n    return getEthProviderError(errorCodes.provider.disconnected, arg);\n  },\n  chainDisconnected: (arg) => {\n    return getEthProviderError(errorCodes.provider.chainDisconnected, arg);\n  },\n  custom: (opts) => {\n    if (!opts || typeof opts !== \"object\" || Array.isArray(opts)) {\n      throw new Error(\"Ethereum Provider custom errors must provide single object argument.\");\n    }\n    const { code, message, data } = opts;\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a nonempty string');\n    }\n    return new EthereumProviderError(code, message, data);\n  }\n};\nfunction getJsonRpcError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new JsonRpcError(code, message ?? getMessageFromCode(code), data);\n}\nfunction getEthProviderError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new EthereumProviderError(code, message ?? getMessageFromCode(code), data);\n}\nfunction parseOpts(arg) {\n  if (arg) {\n    if (typeof arg === \"string\") {\n      return [arg];\n    } else if (typeof arg === \"object\" && !Array.isArray(arg)) {\n      const { message, data } = arg;\n      if (message && typeof message !== \"string\") {\n        throw new Error(\"Must specify string message.\");\n      }\n      return [message ?? undefined, data];\n    }\n  }\n  return [];\n}\n// node_modules/eventemitter3/index.mjs\nvar import__ = __toESM(require_eventemitter3(), 1);\n\n// src/types.ts\nvar GeminiSdkEvent;\n((GeminiSdkEvent2) => {\n  GeminiSdkEvent2[\"POPUP_LOADED\"] = \"POPUP_LOADED\";\n  GeminiSdkEvent2[\"POPUP_UNLOADED\"] = \"POPUP_UNLOADED\";\n  GeminiSdkEvent2[\"POPUP_APP_CONTEXT\"] = \"POPUP_APP_CONTEXT\";\n  GeminiSdkEvent2[\"SDK_CONNECT\"] = \"SDK_CONNECT\";\n  GeminiSdkEvent2[\"SDK_DISCONNECT\"] = \"SDK_DISCONNECT\";\n  GeminiSdkEvent2[\"SDK_SEND_TRANSACTION\"] = \"SDK_SEND_TRANSACTION\";\n  GeminiSdkEvent2[\"SDK_SIGN_DATA\"] = \"SDK_SIGN_DATA\";\n  GeminiSdkEvent2[\"SDK_SIGN_TYPED_DATA\"] = \"SDK_SIGN_TYPED_DATA\";\n  GeminiSdkEvent2[\"SDK_SWITCH_CHAIN\"] = \"SDK_SWITCH_CHAIN\";\n  GeminiSdkEvent2[\"SDK_OPEN_SETTINGS\"] = \"SDK_OPEN_SETTINGS\";\n})(GeminiSdkEvent ||= {});\nclass ProviderEventEmitter extends import__.default {\n}\n\n// src/utils/base64.ts\nfunction encodeBase64(array2) {\n  let base64;\n  if (typeof Buffer !== \"undefined\") {\n    base64 = Buffer.from(array2).toString(\"base64\");\n  } else {\n    base64 = btoa(Array.from(array2).map((b) => String.fromCharCode(b)).join(\"\"));\n  }\n  return base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n}\nfunction decodeBase64(base64url) {\n  let base64 = base64url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  while (base64.length % 4 !== 0) {\n    base64 += \"=\";\n  }\n  if (typeof Buffer !== \"undefined\") {\n    return new Uint8Array(Buffer.from(base64, \"base64\"));\n  }\n  const binaryString = atob(base64);\n  const bytes = new Uint8Array(binaryString.length);\n  for (let i = 0;i < binaryString.length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes;\n}\nfunction bufferToBase64URLString(buffer) {\n  const bytes = buffer instanceof Uint8Array ? buffer : new Uint8Array(buffer);\n  return encodeBase64(bytes);\n}\nfunction utf8StringToBuffer(value) {\n  if (typeof TextEncoder !== \"undefined\") {\n    return new TextEncoder().encode(value);\n  }\n  if (typeof Buffer !== \"undefined\") {\n    return new Uint8Array(Buffer.from(value, \"utf8\"));\n  }\n  const bytes = new Uint8Array(value.length);\n  for (let i = 0;i < value.length; i++) {\n    bytes[i] = value.charCodeAt(i);\n  }\n  return bytes;\n}\nfunction base64ToHex(base64) {\n  const bytes = decodeBase64(base64);\n  return Array.from(bytes).map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n}\n// src/constants.ts\nvar SDK_BACKEND_URL = \"https://keys.gemini.com\";\nvar SDK_VERSION = \"0.1.0\";\nvar DEFAULT_CHAIN_ID = 42161;\nvar MAINNET_CHAIN_IDS = {\n  ETHEREUM: 1,\n  ARBITRUM_ONE: 42161,\n  OP_MAINNET: 10,\n  BASE: 8453,\n  POLYGON: 137\n};\nvar TESTNET_CHAIN_IDS = {\n  SEPOLIA: 11155111,\n  ARBITRUM_SEPOLIA: 421614,\n  OP_SEPOLIA: 11155420,\n  BASE_SEPOLIA: 84532,\n  POLYGON_AMOY: 80002\n};\nvar SUPPORTED_CHAIN_IDS = [\n  ...Object.values(MAINNET_CHAIN_IDS),\n  ...Object.values(TESTNET_CHAIN_IDS)\n];\nvar POPUP_WIDTH = 420;\nvar POPUP_HEIGHT = 650;\n\n// src/utils/popup.ts\nvar openPopup = (url) => {\n  const left = (window.innerWidth - POPUP_WIDTH) / 2 + window.screenX;\n  const top = (window.innerHeight - POPUP_HEIGHT) / 2 + window.screenY;\n  const popupId = `gemini_wallet_${crypto.randomUUID()}`;\n  const popup = window.open(url, popupId, `width=${POPUP_WIDTH}, height=${POPUP_HEIGHT}, left=${left}, top=${top}`);\n  popup?.focus();\n  if (!popup) {\n    throw rpcErrors.internal(\"Pop up window failed to open\");\n  }\n  return popup;\n};\nvar closePopup = (popup) => {\n  if (popup && !popup.closed) {\n    popup.close();\n  }\n};\n// src/utils/strings.ts\nvar hexStringFromNumber = (num) => `0x${BigInt(num).toString(16)}`;\nvar safeJsonStringify = (obj) => JSON.stringify(obj, (_, value) => typeof value === \"bigint\" ? value.toString() + \"n\" : value, 2);\n\n// src/utils/index.ts\nvar generateRequestId = () => crypto.randomUUID();\n\n// src/communicator.ts\nclass Communicator {\n  appMetadata;\n  url;\n  popup = null;\n  listeners = new Map;\n  onDisconnectCallback;\n  constructor({ appMetadata, onDisconnectCallback }) {\n    this.url = new URL(SDK_BACKEND_URL);\n    this.appMetadata = appMetadata;\n    this.onDisconnectCallback = onDisconnectCallback;\n  }\n  async postMessage(message) {\n    const popup = await this.waitForPopupLoaded();\n    popup.postMessage(message, this.url.origin);\n  }\n  async postRequestAndWaitForResponse(request) {\n    const responsePromise = this.onMessage(({ requestId }) => requestId === request.requestId);\n    await this.postMessage(request);\n    return responsePromise;\n  }\n  async onMessage(predicate) {\n    return new Promise((resolve, reject) => {\n      const listener = (event) => {\n        if (event.origin !== this.url.origin)\n          return;\n        const message = event.data;\n        if (predicate(message)) {\n          resolve(message);\n          window.removeEventListener(\"message\", listener);\n          this.listeners.delete(listener);\n        }\n      };\n      window.addEventListener(\"message\", listener);\n      this.listeners.set(listener, { reject });\n    });\n  }\n  onRequestCancelled() {\n    closePopup(this.popup ?? undefined);\n    this.popup = null;\n    this.listeners.forEach(({ reject }, listener) => {\n      reject(providerErrors.userRejectedRequest());\n      window.removeEventListener(\"message\", listener);\n    });\n    this.listeners.clear();\n  }\n  async waitForPopupLoaded() {\n    if (this.popup && !this.popup.closed) {\n      this.popup.focus();\n      return this.popup;\n    }\n    this.popup = openPopup(this.url);\n    this.onMessage(({ event }) => event === \"POPUP_UNLOADED\" /* POPUP_UNLOADED */).then(() => this.onRequestCancelled()).catch(() => {});\n    this.onMessage(({ event }) => event === \"SDK_DISCONNECT\" /* SDK_DISCONNECT */).then(() => {\n      this.onDisconnectCallback?.();\n      this.onRequestCancelled();\n    }).catch(() => {});\n    return this.onMessage(({ event }) => event === \"POPUP_LOADED\" /* POPUP_LOADED */).then((message) => {\n      this.postMessage({\n        chainId: DEFAULT_CHAIN_ID,\n        data: {\n          appMetadata: this.appMetadata,\n          origin: window.location.origin,\n          sdkVersion: SDK_VERSION\n        },\n        event: \"POPUP_APP_CONTEXT\" /* POPUP_APP_CONTEXT */,\n        origin: window.location.origin,\n        requestId: message.requestId\n      });\n      return message;\n    }).then(() => {\n      if (!this.popup)\n        throw rpcErrors.internal();\n      return this.popup;\n    });\n  }\n}\n// src/storage/storageInterface.ts\nvar STORAGE_ETH_ACCOUNTS_KEY = \"eth-accounts\";\nvar STORAGE_ETH_ACTIVE_CHAIN_KEY = \"eth-active-chain\";\nvar STORAGE_PASSKEY_CREDENTIAL_KEY = \"passkey-credential\";\nvar STORAGE_SMART_ACCOUNT_KEY = \"smart-account\";\nvar STORAGE_SETTINGS_KEY = \"settings\";\n\n// src/storage/storage.ts\nvar memoryStorage = {};\nclass GeminiStorage {\n  scope = \"@gemini\";\n  module = \"wallet\";\n  scopedKey(key) {\n    return `${this.scope}.${this.module}.${key}`;\n  }\n  async storeObject(key, item) {\n    const json = safeJsonStringify(item);\n    await this.setItem(key, json);\n  }\n  async loadObject(key, fallback) {\n    const item = await this.getItem(key);\n    if (!item) {\n      await this.storeObject(key, fallback);\n      return fallback;\n    }\n    try {\n      return JSON.parse(item);\n    } catch (error) {\n      console.error(`Error parsing JSON for key ${key}:`, error);\n      return fallback;\n    }\n  }\n  setItem(key, value) {\n    const scoped = this.scopedKey(key);\n    try {\n      localStorage.setItem(scoped, value);\n    } catch {\n      memoryStorage[scoped] = value;\n    }\n    return Promise.resolve();\n  }\n  getItem(key) {\n    const scoped = this.scopedKey(key);\n    try {\n      return Promise.resolve(localStorage.getItem(scoped) ?? undefined);\n    } catch {\n      return Promise.resolve(memoryStorage[scoped] || undefined);\n    }\n  }\n  removeItem(key) {\n    const scoped = this.scopedKey(key);\n    try {\n      localStorage.removeItem(scoped);\n    } catch {\n      delete memoryStorage[scoped];\n    }\n    return Promise.resolve();\n  }\n}\n// src/wallets/wallet.ts\nfunction isChainSupportedByGeminiSw(chainId) {\n  return SUPPORTED_CHAIN_IDS.includes(chainId);\n}\n\nclass GeminiWallet {\n  communicator;\n  storage;\n  initPromise;\n  accounts = [];\n  chain = { id: DEFAULT_CHAIN_ID };\n  constructor({\n    appMetadata,\n    chain,\n    onDisconnectCallback,\n    storage\n  }) {\n    this.communicator = new Communicator({\n      appMetadata,\n      onDisconnectCallback\n    });\n    this.storage = storage || new GeminiStorage;\n    this.initPromise = this.initializeFromStorage(chain?.id ?? this.chain.id);\n  }\n  async initializeFromStorage(defaultChainId) {\n    const [storedChain, storedAccounts] = await Promise.all([\n      this.storage.loadObject(STORAGE_ETH_ACTIVE_CHAIN_KEY, {\n        id: defaultChainId\n      }),\n      this.storage.loadObject(STORAGE_ETH_ACCOUNTS_KEY, this.accounts)\n    ]);\n    this.chain = storedChain;\n    this.accounts = storedAccounts;\n  }\n  async ensureInitialized() {\n    await this.initPromise;\n  }\n  async connect() {\n    await this.ensureInitialized();\n    const response = await this.sendMessageToPopup({\n      chainId: this.chain.id,\n      event: \"SDK_CONNECT\" /* SDK_CONNECT */,\n      origin: window.location.origin\n    });\n    this.accounts = [response.data.address];\n    await this.storage.storeObject(STORAGE_ETH_ACCOUNTS_KEY, this.accounts);\n    return this.accounts;\n  }\n  async switchChain({\n    id\n  }) {\n    await this.ensureInitialized();\n    if (isChainSupportedByGeminiSw(id)) {\n      this.chain = { id };\n      await this.storage.storeObject(STORAGE_ETH_ACTIVE_CHAIN_KEY, { id });\n      return;\n    }\n    const response = await this.sendMessageToPopup({\n      chainId: this.chain.id,\n      data: id,\n      event: \"SDK_SWITCH_CHAIN\" /* SDK_SWITCH_CHAIN */,\n      origin: window.location.origin\n    });\n    return response.data.error;\n  }\n  async sendTransaction(txData) {\n    await this.ensureInitialized();\n    const response = await this.sendMessageToPopup({\n      chainId: this.chain.id,\n      data: txData,\n      event: \"SDK_SEND_TRANSACTION\" /* SDK_SEND_TRANSACTION */,\n      origin: window.location.origin\n    });\n    return response.data;\n  }\n  async signData({\n    message\n  }) {\n    await this.ensureInitialized();\n    const response = await this.sendMessageToPopup({\n      chainId: this.chain.id,\n      data: { message },\n      event: \"SDK_SIGN_DATA\" /* SDK_SIGN_DATA */,\n      origin: window.location.origin\n    });\n    return response.data;\n  }\n  async signTypedData({\n    message,\n    types,\n    primaryType,\n    domain\n  }) {\n    await this.ensureInitialized();\n    const response = await this.sendMessageToPopup({\n      chainId: this.chain.id,\n      data: {\n        domain,\n        message,\n        primaryType,\n        types\n      },\n      event: \"SDK_SIGN_TYPED_DATA\" /* SDK_SIGN_TYPED_DATA */,\n      origin: window.location.origin\n    });\n    return response.data;\n  }\n  async openSettings() {\n    await this.ensureInitialized();\n    await this.sendMessageToPopup({\n      chainId: this.chain.id,\n      data: {},\n      event: \"SDK_OPEN_SETTINGS\" /* SDK_OPEN_SETTINGS */,\n      origin: window.location.origin\n    });\n  }\n  sendMessageToPopup(request) {\n    return this.communicator.postRequestAndWaitForResponse({\n      ...request,\n      requestId: window?.crypto?.randomUUID()\n    });\n  }\n}\n// src/provider/provider.utils.ts\nvar fetchRpcRequest = async (request, rpcUrl) => {\n  const requestBody = {\n    ...request,\n    id: window?.crypto?.randomUUID(),\n    jsonrpc: \"2.0\"\n  };\n  const res = await window.fetch(rpcUrl, {\n    body: JSON.stringify(requestBody),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    method: \"POST\",\n    mode: \"cors\"\n  });\n  const { result, error } = await res.json();\n  if (error) {\n    throw error;\n  }\n  return result;\n};\nfunction validateRpcRequestArgs(args) {\n  if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n    throw rpcErrors.invalidParams({\n      message: \"Expected a single, non-array, object argument.\"\n    });\n  }\n  const { method, params } = args;\n  if (typeof method !== \"string\" || method.length === 0) {\n    throw rpcErrors.invalidParams({\n      message: \"'args.method' must be a non-empty string.\"\n    });\n  }\n  if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n    throw rpcErrors.invalidParams({\n      message: \"'args.params' must be an object or array if provided.\"\n    });\n  }\n}\nfunction convertSendValuesToBigInt(tx) {\n  const FIELDS_TO_NORMALIZE = [\"value\", \"gas\", \"gasPrice\", \"maxPriorityFeePerGas\", \"maxFeePerGas\"];\n  const normalized = { ...tx };\n  for (const field of FIELDS_TO_NORMALIZE) {\n    if (!(field in tx)) {\n      continue;\n    }\n    const value = tx[field];\n    if (typeof value === \"bigint\") {\n      continue;\n    }\n    if (isHex(value)) {\n      normalized[field] = BigInt(value);\n    }\n  }\n  return normalized;\n}\n\n// src/provider/provider.ts\nclass GeminiWalletProvider extends ProviderEventEmitter {\n  config;\n  wallet = undefined;\n  constructor(providerConfig) {\n    super();\n    this.config = providerConfig;\n    this.wallet = new GeminiWallet({\n      ...providerConfig,\n      onDisconnectCallback: this.disconnect.bind(this)\n    });\n  }\n  async request(args) {\n    try {\n      validateRpcRequestArgs(args);\n      if (!this.wallet?.accounts?.length) {\n        switch (args.method) {\n          case \"eth_requestAccounts\": {\n            this.wallet = new GeminiWallet({\n              ...this.config,\n              onDisconnectCallback: this.disconnect.bind(this)\n            });\n            await this.wallet.connect();\n            this.emit(\"accountsChanged\", this.wallet.accounts);\n            break;\n          }\n          case \"net_version\":\n            return DEFAULT_CHAIN_ID;\n          case \"eth_chainId\":\n            return hexStringFromNumber(DEFAULT_CHAIN_ID);\n          default: {\n            throw providerErrors.unauthorized();\n          }\n        }\n      }\n      let response;\n      let requestParams;\n      switch (args.method) {\n        case \"eth_requestAccounts\":\n        case \"eth_accounts\":\n          response = this.wallet.accounts;\n          break;\n        case \"net_version\":\n          response = this.wallet.chain.id;\n          break;\n        case \"eth_chainId\":\n          response = hexStringFromNumber(this.wallet.chain.id);\n          break;\n        case \"personal_sign\":\n        case \"wallet_sign\":\n          requestParams = args.params;\n          response = await this.wallet.signData({\n            account: requestParams[1],\n            message: requestParams[0]\n          });\n          if (response.error) {\n            throw rpcErrors.transactionRejected(response.error);\n          } else {\n            response = response.hash;\n          }\n          break;\n        case \"eth_sendTransaction\":\n        case \"wallet_sendTransaction\":\n          requestParams = args.params;\n          requestParams = convertSendValuesToBigInt(requestParams[0]);\n          response = await this.wallet.sendTransaction(requestParams);\n          if (response.error) {\n            throw rpcErrors.transactionRejected(response.error);\n          } else {\n            response = response.hash;\n          }\n          break;\n        case \"wallet_switchEthereumChain\": {\n          const rawParams = args.params;\n          let chainId;\n          if (Array.isArray(rawParams) && rawParams[0]?.chainId) {\n            chainId = parseInt(rawParams[0].chainId, 16);\n          } else if (rawParams && typeof rawParams === \"object\" && \"id\" in rawParams && Number.isInteger(rawParams.id)) {\n            chainId = rawParams.id;\n          } else {\n            throw rpcErrors.invalidParams(\"Invalid chain id argument. Expected [{ chainId: hex_string }] or { id: number }.\");\n          }\n          response = await this.wallet.switchChain({ id: chainId });\n          if (response) {\n            throw providerErrors.custom({ code: 4902, message: response });\n          }\n          await this.emit(\"chainChanged\", hexStringFromNumber(chainId));\n          break;\n        }\n        case \"eth_signTypedData_v1\":\n        case \"eth_signTypedData_v2\":\n        case \"eth_signTypedData_v3\":\n        case \"eth_signTypedData_v4\":\n        case \"eth_signTypedData\": {\n          requestParams = args.params;\n          const signedTypedDataParams = JSON.parse(requestParams[1]);\n          response = await this.wallet.signTypedData({\n            account: requestParams[0],\n            domain: signedTypedDataParams.domain,\n            message: signedTypedDataParams.message,\n            primaryType: signedTypedDataParams.primaryType,\n            types: signedTypedDataParams.types\n          });\n          if (response.error) {\n            throw rpcErrors.transactionRejected(response.error);\n          } else {\n            response = response.hash;\n          }\n          break;\n        }\n        case \"eth_ecRecover\":\n        case \"eth_subscribe\":\n        case \"eth_unsubscribe\":\n        case \"personal_ecRecover\":\n        case \"eth_signTransaction\":\n        case \"wallet_watchAsset\":\n        case \"wallet_sendCalls\":\n        case \"wallet_getCallsStatus\":\n        case \"wallet_getCapabilities\":\n        case \"wallet_showCallsStatus\":\n        case \"wallet_grantPermissions\":\n          throw rpcErrors.methodNotSupported(\"Not yet implemented.\");\n        case \"eth_sign\":\n        case \"eth_coinbase\":\n        case \"wallet_addEthereumChain\":\n          throw rpcErrors.methodNotSupported();\n        default:\n          if (!this.wallet.chain.rpcUrl) {\n            throw rpcErrors.internal(`RPC URL missing for current chain (${this.wallet.chain.id})`);\n          }\n          return fetchRpcRequest(args, this.wallet.chain.rpcUrl);\n      }\n      return response;\n    } catch (error) {\n      const { code } = error;\n      if (code === errorCodes.provider.unauthorized) {\n        this.disconnect();\n      }\n      return Promise.reject(serializeError(error));\n    }\n  }\n  async openSettings() {\n    await this.wallet?.openSettings();\n  }\n  async disconnect() {\n    this.wallet = undefined;\n    const Storage = new GeminiStorage;\n    await Storage.removeItem(STORAGE_ETH_ACCOUNTS_KEY);\n    await Storage.removeItem(STORAGE_ETH_ACTIVE_CHAIN_KEY);\n    await this.emit(\"disconnect\", \"User initiated disconnection\");\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@gemini-wallet/core/dist/index.js\n");

/***/ })

};
;