# Phase 2 Implementation - Complete Workflow Section
# This file contains the complete GitHub Actions workflow modification for Phase 2
# Copy and paste this section into .github/workflows/ci.yml if Phase 1 metrics are insufficient

# INSTRUCTIONS:
# 1. Replace the existing "Install dependencies with cache optimization" step with the following
# 2. Add the Phase 2 fallback step after it
# 3. Update any step references accordingly

# ================================================================================
# PHASE 2 COMPLETE IMPLEMENTATION
# ================================================================================

      - name: Install dependencies with cache optimization (Phase 1)
        id: phase1-install
        env:
          EMERGENCY_NPM_BYPASS: ${{ vars.EMERGENCY_NPM_BYPASS }}
        continue-on-error: true
        run: |
          echo "🚀 Phase 1: Optimized npm installation with cache strategy"
          echo "🔍 Environment check:"
          echo "- Node version: $(node --version)"
          echo "- NPM version: $(npm --version)"
          echo "- Registry: $(npm config get registry)"
          echo "- Cache location: $(npm config get cache)"
          echo "- Emergency bypass: ${EMERGENCY_NPM_BYPASS:-false}"
          
          # Check if emergency bypass is enabled
          if [ "${EMERGENCY_NPM_BYPASS}" = "true" ]; then
            echo "🚨 Emergency bypass enabled - using simple npm ci"
            npm ci --timeout=300000
            exit 0
          fi
          
          # Start timer for performance metrics
          start_time=$(date +%s)
          
          echo "📦 Installing dependencies with cache optimization..."
          
          # Phase 1: Cache-optimized installation with single attempt
          if npm ci --prefer-offline --no-audit --no-fund --timeout=180000; then
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            echo "✅ Phase 1: Dependencies installed successfully in ${duration} seconds"
            
            # Performance metrics
            echo "npm_install_duration=${duration}" >> $GITHUB_STEP_SUMMARY
            echo "npm_install_attempts=1" >> $GITHUB_STEP_SUMMARY
            echo "npm_cache_strategy=prefer-offline" >> $GITHUB_STEP_SUMMARY
            echo "npm_registry_used=primary" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase_completed=1" >> $GITHUB_STEP_SUMMARY
            
          else
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            echo "❌ Phase 1: Installation failed after ${duration} seconds"
            echo "📊 Phase 1 failure diagnostics:"
            echo "- Exit code: $?"
            echo "- Duration: ${duration}s"
            echo "- Registry: $(npm config get registry)"
            echo "- Network test: $(curl -s --connect-timeout 5 https://registry.npmjs.org/ > /dev/null && echo 'OK' || echo 'FAILED')"
            
            # Log Phase 1 failure metrics
            echo "npm_install_duration=${duration}" >> $GITHUB_STEP_SUMMARY
            echo "npm_install_attempts=1" >> $GITHUB_STEP_SUMMARY
            echo "npm_failure_reason=phase1_failed" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase_completed=1" >> $GITHUB_STEP_SUMMARY
            
            echo "🔄 Phase 1 failed - Phase 2 will attempt fallback registry"
            exit 1
          fi
          
          echo "📋 Final dependency verification:"
          npm list --depth=0 || echo "⚠️ Some dependencies may have issues, but installation completed"
          
          # Specific check for problematic packages
          echo "🔍 Checking for zustand..."
          if npm list zustand 2>/dev/null; then
            echo "✅ zustand successfully installed"
          else
            echo "⚠️ zustand not found in dependency tree (may be indirect)"
          fi
          
          echo "🎉 Phase 1 cache-optimized installation complete!"

      - name: Phase 2 - Fallback Registry Installation
        if: steps.phase1-install.outcome == 'failure'
        id: phase2-install
        env:
          EMERGENCY_NPM_BYPASS: ${{ vars.EMERGENCY_NPM_BYPASS }}
        run: |
          echo "🔄 Phase 2: Fallback registry installation"
          echo "=========================================="
          
          # Check if emergency bypass is enabled
          if [ "${EMERGENCY_NPM_BYPASS}" = "true" ]; then
            echo "🚨 Emergency bypass enabled - skipping Phase 2"
            echo "Using emergency installation method..."
            npm ci --timeout=300000
            if [ $? -eq 0 ]; then
              echo "✅ Emergency installation successful"
              echo "npm_emergency_bypass=true" >> $GITHUB_STEP_SUMMARY
              exit 0
            else
              echo "❌ Emergency installation failed"
              exit 1
            fi
          fi
          
          # Start timer for Phase 2 metrics
          start_time=$(date +%s)
          
          echo "🏥 Testing fallback registry health..."
          
          # Registry health check with priority order
          fallback_registry=""
          
          # Test Yarn registry first (most reliable fallback)
          if curl -s --connect-timeout 10 --max-time 15 https://registry.yarnpkg.com/ > /dev/null; then
            echo "✅ Yarn registry (registry.yarnpkg.com) is healthy"
            fallback_registry="https://registry.yarnpkg.com/"
          else
            echo "⚠️ Yarn registry unavailable, testing Cloudflare mirror..."
            
            # Test Cloudflare mirror as secondary fallback
            if curl -s --connect-timeout 10 --max-time 15 https://registry.npmjs.cf/ > /dev/null; then
              echo "✅ Cloudflare mirror (registry.npmjs.cf) is healthy"
              fallback_registry="https://registry.npmjs.cf/"
            else
              echo "⚠️ Cloudflare mirror unavailable, testing primary registry status..."
              
              # Test if primary registry is back online
              if curl -s --connect-timeout 10 --max-time 15 https://registry.npmjs.org/ > /dev/null; then
                echo "🔄 Primary registry appears online again, retrying with different approach"
                fallback_registry="https://registry.npmjs.org/"
              else
                echo "❌ All registries appear unavailable"
                echo "🔧 Registry diagnostics:"
                echo "- Primary (npmjs.org): FAILED"
                echo "- Yarn (yarnpkg.com): FAILED" 
                echo "- Cloudflare (npmjs.cf): FAILED"
                echo "- DNS resolution: $(nslookup registry.npmjs.org | grep -c 'Address' || echo 'FAILED')"
                
                echo "📊 Phase 2 failure metrics:"
                end_time=$(date +%s)
                duration=$((end_time - start_time))
                echo "npm_install_duration=${duration}" >> $GITHUB_STEP_SUMMARY
                echo "npm_install_attempts=2" >> $GITHUB_STEP_SUMMARY
                echo "npm_phase2_success=false" >> $GITHUB_STEP_SUMMARY
                echo "npm_failure_reason=all_registries_failed" >> $GITHUB_STEP_SUMMARY
                echo "npm_phase_completed=2" >> $GITHUB_STEP_SUMMARY
                
                echo "💀 Phase 2 failed: All registries unavailable. Consider implementing Phase 3."
                exit 1
              fi
          fi
          
          echo "📦 Installing dependencies from fallback registry: $fallback_registry"
          echo "⏱️ Using 90-second timeout for fallback registry..."
          
          # Phase 2 installation with selected fallback registry
          if npm ci --registry="$fallback_registry" --timeout=90000 --no-audit --no-fund; then
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            echo "✅ Phase 2: Installation successful in ${duration} seconds"
            echo "🎯 Fallback registry successful: $fallback_registry"
            
            # Log Phase 2 success metrics
            echo "npm_install_duration=${duration}" >> $GITHUB_STEP_SUMMARY
            echo "npm_install_attempts=2" >> $GITHUB_STEP_SUMMARY
            echo "npm_fallback_registry_used=$fallback_registry" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase2_success=true" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase_completed=2" >> $GITHUB_STEP_SUMMARY
            
            echo "📋 Phase 2 dependency verification:"
            npm list --depth=0 || echo "⚠️ Some dependencies may have issues, but installation completed"
            
            # Specific check for problematic packages
            echo "🔍 Checking for zustand..."
            if npm list zustand 2>/dev/null; then
              echo "✅ zustand successfully installed via fallback registry"
            else
              echo "⚠️ zustand not found in dependency tree (may be indirect)"
            fi
            
            echo "🎉 Phase 2 fallback installation complete!"
            
          else
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            echo "❌ Phase 2: Installation failed after ${duration} seconds"
            echo "📊 Phase 2 failure diagnostics:"
            echo "- Registry used: $fallback_registry"
            echo "- Exit code: $?"
            echo "- Duration: ${duration}s"
            echo "- Network connectivity: $(ping -c 1 8.8.8.8 > /dev/null && echo 'OK' || echo 'FAILED')"
            
            # Log Phase 2 failure metrics
            echo "npm_install_duration=${duration}" >> $GITHUB_STEP_SUMMARY
            echo "npm_install_attempts=2" >> $GITHUB_STEP_SUMMARY
            echo "npm_fallback_registry_used=$fallback_registry" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase2_success=false" >> $GITHUB_STEP_SUMMARY
            echo "npm_failure_reason=phase2_failed" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase_completed=2" >> $GITHUB_STEP_SUMMARY
            
            echo "💀 Phase 2 failed with fallback registry. Consider implementing Phase 3 or investigating network issues."
            exit 1
          fi

# ================================================================================
# ACTIVATION INSTRUCTIONS
# ================================================================================

# 1. PREREQUISITES:
#    - Phase 1 metrics show < 90% success rate after 1 week
#    - Average installation time > 3 minutes
#    - Cache hit rate < 60%

# 2. IMPLEMENTATION STEPS:
#    a) Replace the current "Install dependencies" step in ci.yml with the above
#    b) Test with a simulated Phase 1 failure
#    c) Monitor Phase 2 performance for 1 week
#    d) Document results in monitoring script

# 3. ROLLBACK PROCEDURE:
#    a) Remove the Phase 2 step
#    b) Remove "continue-on-error: true" from Phase 1
#    c) Remove "id: phase1-install" from Phase 1 step
#    d) Restore original Phase 1 implementation

# 4. SUCCESS CRITERIA FOR PHASE 2:
#    - Combined Phase 1 + Phase 2 success rate > 94%
#    - Phase 2 additional time < 45 seconds
#    - Fallback registry reliability > 95%
#    - Developer satisfaction maintained or improved

# 5. PHASE 3 ACTIVATION TRIGGERS:
#    - Combined success rate < 97% after Phase 2
#    - Complex failure patterns requiring multiple strategies
#    - Persistent network connectivity issues