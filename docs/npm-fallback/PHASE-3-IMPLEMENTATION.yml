# Phase 3 Implementation - Full Three-Level Strategy
# This file contains the complete GitHub Actions workflow for the full fallback strategy
# Implement this only if Phase 2 shows < 97% success rate after 1 week

# ================================================================================
# PHASE 3 COMPLETE IMPLEMENTATION - FULL THREE-LEVEL STRATEGY
# ================================================================================

      - name: Phase 1 - Optimized Fast Path
        id: phase1-install
        env:
          EMERGENCY_NPM_BYPASS: ${{ vars.EMERGENCY_NPM_BYPASS }}
        continue-on-error: true
        run: |
          echo "🚀 Phase 1: Optimized Fast Path Installation"
          echo "============================================"
          
          # Emergency bypass check
          if [ "${EMERGENCY_NPM_BYPASS}" = "true" ]; then
            echo "🚨 Emergency bypass enabled - using simple npm ci"
            npm ci --timeout=300000
            exit 0
          fi
          
          # Pre-flight registry health check
          echo "🔍 Pre-flight checks:"
          echo "- Node: $(node --version)"
          echo "- NPM: $(npm --version)" 
          echo "- Registry: $(npm config get registry)"
          echo "- Cache: $(npm config get cache)"
          
          # Quick registry ping (5-second timeout)
          registry_status="unknown"
          if timeout 5 npm ping --silent 2>/dev/null; then
            registry_status="healthy"
            echo "- Registry status: ✅ healthy"
          else
            registry_status="unhealthy"
            echo "- Registry status: ⚠️ unhealthy"
          fi
          
          start_time=$(date +%s)
          
          echo "📦 Phase 1: Cache-optimized installation..."
          
          # Level 1: Fast path with aggressive caching
          if npm ci --prefer-offline --no-audit --no-fund --timeout=120000; then
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            echo "✅ Phase 1 SUCCESS in ${duration}s"
            
            # Phase 1 success metrics
            echo "npm_install_duration=${duration}" >> $GITHUB_STEP_SUMMARY
            echo "npm_install_attempts=1" >> $GITHUB_STEP_SUMMARY
            echo "npm_cache_strategy=prefer-offline" >> $GITHUB_STEP_SUMMARY
            echo "npm_registry_status=${registry_status}" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase_completed=1" >> $GITHUB_STEP_SUMMARY
            echo "npm_final_result=success" >> $GITHUB_STEP_SUMMARY
            
            exit 0
          else
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            phase1_exit_code=$?
            
            echo "❌ Phase 1 FAILED in ${duration}s (exit code: ${phase1_exit_code})"
            
            # Classify failure type for intelligent routing
            failure_type="unknown"
            if [ "$phase1_exit_code" -eq 124 ]; then
              failure_type="timeout"
            elif curl -s --connect-timeout 5 https://registry.npmjs.org/ > /dev/null; then
              failure_type="npm_error"
            else
              failure_type="network_error"
            fi
            
            echo "- Failure type: ${failure_type}"
            echo "- Registry status: ${registry_status}"
            
            # Phase 1 failure metrics
            echo "npm_phase1_duration=${duration}" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase1_exit_code=${phase1_exit_code}" >> $GITHUB_STEP_SUMMARY
            echo "npm_failure_type=${failure_type}" >> $GITHUB_STEP_SUMMARY
            echo "npm_registry_status=${registry_status}" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase_completed=1" >> $GITHUB_STEP_SUMMARY
            
            echo "🔄 Phase 1 failed - escalating to Phase 2"
            exit 1
          fi

      - name: Phase 2 - Alternative Registry Fallback
        if: steps.phase1-install.outcome == 'failure'
        id: phase2-install
        continue-on-error: true
        env:
          EMERGENCY_NPM_BYPASS: ${{ vars.EMERGENCY_NPM_BYPASS }}
        run: |
          echo "🔄 Phase 2: Alternative Registry Fallback"
          echo "========================================"
          
          # Emergency bypass check
          if [ "${EMERGENCY_NPM_BYPASS}" = "true" ]; then
            echo "🚨 Emergency bypass - skipping Phase 2"
            exit 1
          fi
          
          start_time=$(date +%s)
          
          echo "🏥 Testing alternative registries..."
          
          # Registry priority matrix based on reliability
          registries=(
            "https://registry.yarnpkg.com/|Yarn Official|10"
            "https://registry.npmjs.cf/|Cloudflare Mirror|10" 
            "https://skimdb.npmjs.com/registry|SkimDB Mirror|15"
          )
          
          selected_registry=""
          selected_name=""
          
          for registry_info in "${registries[@]}"; do
            IFS='|' read -r registry_url registry_name timeout <<< "$registry_info"
            
            echo "🔍 Testing ${registry_name} (${registry_url})..."
            
            if timeout "${timeout}" curl -s --connect-timeout 5 "${registry_url}" > /dev/null; then
              echo "✅ ${registry_name} is responsive"
              selected_registry="$registry_url"
              selected_name="$registry_name"
              break
            else
              echo "❌ ${registry_name} is unresponsive"
            fi
          done
          
          if [ -z "$selected_registry" ]; then
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            echo "💀 Phase 2 FAILED: No alternative registries available"
            
            # Phase 2 failure metrics
            echo "npm_phase2_duration=${duration}" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase2_registry=none_available" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase_completed=2" >> $GITHUB_STEP_SUMMARY
            
            echo "🔄 All registries failed - escalating to Phase 3"
            exit 1
          fi
          
          echo "📦 Installing from ${selected_name}..."
          echo "⏱️ Using 90-second timeout for fallback registry"
          
          # Phase 2 installation attempt
          if npm ci --registry="$selected_registry" --timeout=90000 --no-audit --no-fund; then
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            echo "✅ Phase 2 SUCCESS in ${duration}s via ${selected_name}"
            
            # Phase 2 success metrics
            total_duration=$(($(cat $GITHUB_STEP_SUMMARY | grep npm_phase1_duration | cut -d'=' -f2) + duration))
            echo "npm_install_duration=${total_duration}" >> $GITHUB_STEP_SUMMARY
            echo "npm_install_attempts=2" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase2_duration=${duration}" >> $GITHUB_STEP_SUMMARY
            echo "npm_fallback_registry=${selected_registry}" >> $GITHUB_STEP_SUMMARY
            echo "npm_fallback_registry_name=${selected_name}" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase_completed=2" >> $GITHUB_STEP_SUMMARY
            echo "npm_final_result=success" >> $GITHUB_STEP_SUMMARY
            
            exit 0
          else
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            phase2_exit_code=$?
            
            echo "❌ Phase 2 FAILED in ${duration}s (exit code: ${phase2_exit_code})"
            
            # Phase 2 failure metrics
            echo "npm_phase2_duration=${duration}" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase2_exit_code=${phase2_exit_code}" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase2_registry=${selected_registry}" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase_completed=2" >> $GITHUB_STEP_SUMMARY
            
            echo "🔄 Phase 2 failed - escalating to Phase 3 (Resilient Recovery)"
            exit 1
          fi

      - name: Phase 3 - Resilient Recovery Mode
        if: steps.phase1-install.outcome == 'failure' && steps.phase2-install.outcome == 'failure'
        id: phase3-install
        env:
          EMERGENCY_NPM_BYPASS: ${{ vars.EMERGENCY_NPM_BYPASS }}
        run: |
          echo "🛠️ Phase 3: Resilient Recovery Mode"
          echo "=================================="
          
          # Emergency bypass check
          if [ "${EMERGENCY_NPM_BYPASS}" = "true" ]; then
            echo "🚨 Emergency bypass active - using last resort method"
            npm ci --timeout=300000
            if [ $? -eq 0 ]; then
              echo "✅ Emergency installation successful"
              echo "npm_emergency_bypass=true" >> $GITHUB_STEP_SUMMARY
              echo "npm_final_result=success" >> $GITHUB_STEP_SUMMARY
              exit 0
            else
              echo "❌ Emergency installation failed"
              echo "npm_final_result=failed" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          fi
          
          start_time=$(date +%s)
          
          echo "📊 Comprehensive diagnostics:"
          echo "- DNS resolution: $(nslookup registry.npmjs.org | grep -c Address || echo '0')"
          echo "- Internet connectivity: $(ping -c 1 8.8.8.8 > /dev/null && echo 'OK' || echo 'FAILED')"
          echo "- Disk space: $(df -h . | tail -1 | awk '{print $4}') available"
          echo "- Memory: $(free -h | grep Mem | awk '{print $7}') available"
          
          # Clear npm cache for clean start
          echo "🧹 Clearing npm cache for clean recovery..."
          npm cache clean --force 2>/dev/null || true
          
          echo "🔄 Phase 3: Adaptive retry with multiple strategies"
          
          # Strategy 1: Retry primary registry with shorter timeout
          echo "Strategy 1: Primary registry with short timeout..."
          if timeout 60 npm ci --registry=https://registry.npmjs.org/ --timeout=45000; then
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            echo "✅ Phase 3 SUCCESS (Strategy 1) in ${duration}s"
            
            # Calculate total duration across all phases
            phase1_duration=$(cat $GITHUB_STEP_SUMMARY | grep npm_phase1_duration | cut -d'=' -f2 || echo "0")
            phase2_duration=$(cat $GITHUB_STEP_SUMMARY | grep npm_phase2_duration | cut -d'=' -f2 || echo "0")
            total_duration=$((phase1_duration + phase2_duration + duration))
            
            echo "npm_install_duration=${total_duration}" >> $GITHUB_STEP_SUMMARY
            echo "npm_install_attempts=3" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase3_duration=${duration}" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase3_strategy=primary_retry" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase_completed=3" >> $GITHUB_STEP_SUMMARY
            echo "npm_final_result=success" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          echo "❌ Strategy 1 failed, trying Strategy 2..."
          
          # Strategy 2: npm install instead of npm ci (more permissive)
          echo "Strategy 2: npm install fallback..."
          if timeout 120 npm install --no-audit --no-fund --timeout=90000; then
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            echo "✅ Phase 3 SUCCESS (Strategy 2) in ${duration}s"
            
            # Calculate total duration
            phase1_duration=$(cat $GITHUB_STEP_SUMMARY | grep npm_phase1_duration | cut -d'=' -f2 || echo "0")
            phase2_duration=$(cat $GITHUB_STEP_SUMMARY | grep npm_phase2_duration | cut -d'=' -f2 || echo "0")
            total_duration=$((phase1_duration + phase2_duration + duration))
            
            echo "npm_install_duration=${total_duration}" >> $GITHUB_STEP_SUMMARY
            echo "npm_install_attempts=3" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase3_duration=${duration}" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase3_strategy=npm_install" >> $GITHUB_STEP_SUMMARY
            echo "npm_phase_completed=3" >> $GITHUB_STEP_SUMMARY
            echo "npm_final_result=success" >> $GITHUB_STEP_SUMMARY
            
            echo "⚠️ WARNING: Used npm install instead of npm ci - check package-lock.json"
            exit 0
          fi
          
          echo "❌ Strategy 2 failed, trying Strategy 3..."
          
          # Strategy 3: Exponential backoff with primary registry
          echo "Strategy 3: Exponential backoff retry..."
          for attempt in 1 2 3; do
            echo "Resilient attempt $attempt of 3..."
            
            if npm ci --timeout=120000; then
              end_time=$(date +%s)
              duration=$((end_time - start_time))
              echo "✅ Phase 3 SUCCESS (Strategy 3, attempt $attempt) in ${duration}s"
              
              # Calculate total duration
              phase1_duration=$(cat $GITHUB_STEP_SUMMARY | grep npm_phase1_duration | cut -d'=' -f2 || echo "0")
              phase2_duration=$(cat $GITHUB_STEP_SUMMARY | grep npm_phase2_duration | cut -d'=' -f2 || echo "0")
              total_duration=$((phase1_duration + phase2_duration + duration))
              
              echo "npm_install_duration=${total_duration}" >> $GITHUB_STEP_SUMMARY
              echo "npm_install_attempts=3" >> $GITHUB_STEP_SUMMARY
              echo "npm_phase3_duration=${duration}" >> $GITHUB_STEP_SUMMARY
              echo "npm_phase3_strategy=exponential_backoff" >> $GITHUB_STEP_SUMMARY
              echo "npm_phase3_attempt=${attempt}" >> $GITHUB_STEP_SUMMARY
              echo "npm_phase_completed=3" >> $GITHUB_STEP_SUMMARY
              echo "npm_final_result=success" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi
            
            if [ $attempt -lt 3 ]; then
              delay=$((20 * attempt))  # 20, 40 seconds
              echo "Waiting ${delay} seconds before retry..."
              sleep $delay
            fi
          done
          
          # All strategies failed
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "💀 Phase 3 COMPLETE FAILURE after ${duration}s"
          echo ""
          echo "🚨 CRITICAL: All npm installation strategies have failed!"
          echo ""
          echo "📊 Complete failure analysis:"
          echo "- Phase 1: Cache-optimized installation FAILED"
          echo "- Phase 2: Alternative registry installation FAILED"  
          echo "- Phase 3: All resilient recovery strategies FAILED"
          echo ""
          echo "🔧 Recommended actions:"
          echo "1. Check npm registry status: https://status.npmjs.org/"
          echo "2. Verify network connectivity and DNS resolution"
          echo "3. Enable emergency bypass: EMERGENCY_NPM_BYPASS=true"
          echo "4. Contact development team lead immediately"
          echo "5. Create incident report with logs from this build"
          echo ""
          
          # Final failure metrics
          phase1_duration=$(cat $GITHUB_STEP_SUMMARY | grep npm_phase1_duration | cut -d'=' -f2 || echo "0")
          phase2_duration=$(cat $GITHUB_STEP_SUMMARY | grep npm_phase2_duration | cut -d'=' -f2 || echo "0")
          total_duration=$((phase1_duration + phase2_duration + duration))
          
          echo "npm_install_duration=${total_duration}" >> $GITHUB_STEP_SUMMARY
          echo "npm_install_attempts=3" >> $GITHUB_STEP_SUMMARY
          echo "npm_phase3_duration=${duration}" >> $GITHUB_STEP_SUMMARY
          echo "npm_phase3_strategy=all_failed" >> $GITHUB_STEP_SUMMARY
          echo "npm_phase_completed=3" >> $GITHUB_STEP_SUMMARY
          echo "npm_final_result=failed" >> $GITHUB_STEP_SUMMARY
          echo "npm_critical_failure=true" >> $GITHUB_STEP_SUMMARY
          
          exit 1

# ================================================================================
# PHASE 3 ACTIVATION CRITERIA
# ================================================================================

# Activate Phase 3 only if:
# 1. Phase 2 combined success rate < 97% after 1 week monitoring
# 2. Complex failure patterns requiring multiple recovery strategies
# 3. Critical infrastructure reliability requirements
# 4. Frequent network connectivity issues in CI environment

# ================================================================================
# PHASE 3 SUCCESS METRICS
# ================================================================================

# Target Metrics:
# - Combined success rate across all 3 phases: > 99%
# - Total maximum time: < 8 minutes (vs 15 minutes previously)
# - Phase 3 activation rate: < 3% of all builds
# - Emergency bypass usage: < 0.1% of all builds
# - Critical failure rate: < 0.01% of all builds

# ================================================================================
# MONITORING AND ALERTING
# ================================================================================

# Phase 3 requires enhanced monitoring:
# 1. Real-time failure alerts when Phase 3 activates
# 2. Daily success rate analysis across all phases
# 3. Weekly infrastructure health assessments
# 4. Monthly strategy effectiveness reviews

# ================================================================================
# MAINTENANCE REQUIREMENTS
# ================================================================================

# 1. Weekly registry health monitoring
# 2. Monthly timeout and retry parameter tuning
# 3. Quarterly alternative registry evaluation
# 4. Semi-annual strategy effectiveness review
# 5. Annual complete system architecture review